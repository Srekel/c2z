// auto generated by c2z
const std = @import("std");
const cpp = @import("cpp");

extern fn memcpy(destination: *anyopaque, source: *const anyopaque, num: usize) *anyopaque;
extern fn memmove(destination: *anyopaque, source: *const anyopaque, num: usize) *anyopaque;
extern fn memcmp(ptr1: ?*const anyopaque, ptr2: ?*const anyopaque, num: usize) c_int;
extern fn memset(destination: ?*anyopaque, value: c_int, num: usize) ?*anyopaque;
extern fn strcmp(str1: [*c]const u8, str2: [*c]const u8) c_int;

pub inline fn ImAssert(ok: bool) void {
    std.debug.assert(ok);
}

pub const ImGuiKeyChord = c_int;

pub const ImTextureID = ?*anyopaque;

pub const ImDrawIdx = c_ushort;

pub const ImGuiID = c_uint;

pub const ImS8 = i8;

pub const ImU8 = u8;

pub const ImS16 = c_short;

pub const ImU16 = c_ushort;

pub const ImS32 = c_int;

pub const ImU32 = c_uint;

pub const ImS64 = c_longlong;

pub const ImU64 = c_ulonglong;

pub const ImWchar16 = c_ushort;

pub const ImWchar32 = c_uint;

pub const ImWchar = ImWchar16;

pub const ImGuiInputTextCallback = ?*const fn ([*c]ImGuiInputTextCallbackData) callconv(.C) c_int;

pub const ImGuiSizeCallback = ?*const fn ([*c]ImGuiSizeCallbackData) callconv(.C) void;

pub const ImGuiMemAllocFunc = ?*const fn (usize, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const ImGuiMemFreeFunc = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const ImVec2 = extern struct {
    x: f32,
    y: f32,

    pub fn getPtr(self: *ImVec2, idx: usize) *f32 {
        ImAssert(idx == @intCast(usize, 0) or idx == @intCast(usize, 1));
        return (@ptrCast([*c]f32, @bitCast(?*anyopaque, @ptrCast([*c]u8, self))))[idx];
    }
    pub fn get(self: *const ImVec2, idx: usize) f32 {
        ImAssert(idx == @intCast(usize, 0) or idx == @intCast(usize, 1));
        return (@ptrCast([*c]const f32, @bitCast(?*const anyopaque, @ptrCast([*c]const u8, self))))[idx];
    }
};

pub const ImVec4 = extern struct {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
};

extern fn _1_ImGui_CreateContext_(shared_font_atlas: [*c]ImFontAtlas) [*c]ImGuiContext;
pub const CreateContext = _1_ImGui_CreateContext_;

extern fn _1_ImGui_DestroyContext_(ctx: [*c]ImGuiContext) void;
pub const DestroyContext = _1_ImGui_DestroyContext_;

extern fn _1_ImGui_GetCurrentContext_() [*c]ImGuiContext;
pub const GetCurrentContext = _1_ImGui_GetCurrentContext_;

extern fn _1_ImGui_SetCurrentContext_(ctx: [*c]ImGuiContext) void;
pub const SetCurrentContext = _1_ImGui_SetCurrentContext_;

extern fn _1_ImGui_GetIO_() *ImGuiIO;
pub const GetIO = _1_ImGui_GetIO_;

extern fn _1_ImGui_GetStyle_() *ImGuiStyle;
pub const GetStyle = _1_ImGui_GetStyle_;

extern fn _1_ImGui_NewFrame_() void;
pub const NewFrame = _1_ImGui_NewFrame_;

extern fn _1_ImGui_EndFrame_() void;
pub const EndFrame = _1_ImGui_EndFrame_;

extern fn _1_ImGui_Render_() void;
pub const Render = _1_ImGui_Render_;

extern fn _1_ImGui_GetDrawData_() [*c]ImDrawData;
pub const GetDrawData = _1_ImGui_GetDrawData_;

extern fn _1_ImGui_ShowDemoWindow_(p_open: [*c]bool) void;
pub const ShowDemoWindow = _1_ImGui_ShowDemoWindow_;

extern fn _1_ImGui_ShowMetricsWindow_(p_open: [*c]bool) void;
pub const ShowMetricsWindow = _1_ImGui_ShowMetricsWindow_;

extern fn _1_ImGui_ShowDebugLogWindow_(p_open: [*c]bool) void;
pub const ShowDebugLogWindow = _1_ImGui_ShowDebugLogWindow_;

extern fn _1_ImGui_ShowStackToolWindow_(p_open: [*c]bool) void;
pub const ShowStackToolWindow = _1_ImGui_ShowStackToolWindow_;

extern fn _1_ImGui_ShowAboutWindow_(p_open: [*c]bool) void;
pub const ShowAboutWindow = _1_ImGui_ShowAboutWindow_;

extern fn _1_ImGui_ShowStyleEditor_(ref: [*c]ImGuiStyle) void;
pub const ShowStyleEditor = _1_ImGui_ShowStyleEditor_;

extern fn _1_ImGui_ShowStyleSelector_(label: [*c]const u8) bool;
pub const ShowStyleSelector = _1_ImGui_ShowStyleSelector_;

extern fn _1_ImGui_ShowFontSelector_(label: [*c]const u8) void;
pub const ShowFontSelector = _1_ImGui_ShowFontSelector_;

extern fn _1_ImGui_ShowUserGuide_() void;
pub const ShowUserGuide = _1_ImGui_ShowUserGuide_;

extern fn _1_ImGui_GetVersion_() [*c]const u8;
pub const GetVersion = _1_ImGui_GetVersion_;

extern fn _1_ImGui_StyleColorsDark_(dst: [*c]ImGuiStyle) void;
pub const StyleColorsDark = _1_ImGui_StyleColorsDark_;

extern fn _1_ImGui_StyleColorsLight_(dst: [*c]ImGuiStyle) void;
pub const StyleColorsLight = _1_ImGui_StyleColorsLight_;

extern fn _1_ImGui_StyleColorsClassic_(dst: [*c]ImGuiStyle) void;
pub const StyleColorsClassic = _1_ImGui_StyleColorsClassic_;

extern fn _1_ImGui_Begin_(name: [*c]const u8, p_open: [*c]bool, flags: ImGuiWindowFlags) bool;
pub const Begin = _1_ImGui_Begin_;

extern fn _1_ImGui_End_() void;
pub const End = _1_ImGui_End_;

extern fn _1_ImGui_BeginChild_(str_id: [*c]const u8, size: *const ImVec2, border: bool, flags: ImGuiWindowFlags) bool;
pub const BeginChild = _1_ImGui_BeginChild_;

extern fn _2_ImGui_BeginChild_(id: ImGuiID, size: *const ImVec2, border: bool, flags: ImGuiWindowFlags) bool;
pub const BeginChild__Overload2 = _2_ImGui_BeginChild_;

extern fn _1_ImGui_EndChild_() void;
pub const EndChild = _1_ImGui_EndChild_;

extern fn _1_ImGui_IsWindowAppearing_() bool;
pub const IsWindowAppearing = _1_ImGui_IsWindowAppearing_;

extern fn _1_ImGui_IsWindowCollapsed_() bool;
pub const IsWindowCollapsed = _1_ImGui_IsWindowCollapsed_;

extern fn _1_ImGui_IsWindowFocused_(flags: ImGuiFocusedFlags) bool;
pub const IsWindowFocused = _1_ImGui_IsWindowFocused_;

extern fn _1_ImGui_IsWindowHovered_(flags: ImGuiHoveredFlags) bool;
pub const IsWindowHovered = _1_ImGui_IsWindowHovered_;

extern fn _1_ImGui_GetWindowDrawList_() [*c]ImDrawList;
pub const GetWindowDrawList = _1_ImGui_GetWindowDrawList_;

extern fn _1_ImGui_GetWindowDpiScale_() f32;
pub const GetWindowDpiScale = _1_ImGui_GetWindowDpiScale_;

extern fn _1_ImGui_GetWindowPos_() ImVec2;
pub const GetWindowPos = _1_ImGui_GetWindowPos_;

extern fn _1_ImGui_GetWindowSize_() ImVec2;
pub const GetWindowSize = _1_ImGui_GetWindowSize_;

extern fn _1_ImGui_GetWindowWidth_() f32;
pub const GetWindowWidth = _1_ImGui_GetWindowWidth_;

extern fn _1_ImGui_GetWindowHeight_() f32;
pub const GetWindowHeight = _1_ImGui_GetWindowHeight_;

extern fn _1_ImGui_GetWindowViewport_() [*c]ImGuiViewport;
pub const GetWindowViewport = _1_ImGui_GetWindowViewport_;

extern fn _1_ImGui_SetNextWindowPos_(pos: *const ImVec2, cond: ImGuiCond, pivot: *const ImVec2) void;
pub const SetNextWindowPos = _1_ImGui_SetNextWindowPos_;

extern fn _1_ImGui_SetNextWindowSize_(size: *const ImVec2, cond: ImGuiCond) void;
pub const SetNextWindowSize = _1_ImGui_SetNextWindowSize_;

extern fn _1_ImGui_SetNextWindowSizeConstraints_(size_min: *const ImVec2, size_max: *const ImVec2, custom_callback: ImGuiSizeCallback, custom_callback_data: ?*anyopaque) void;
pub const SetNextWindowSizeConstraints = _1_ImGui_SetNextWindowSizeConstraints_;

extern fn _1_ImGui_SetNextWindowContentSize_(size: *const ImVec2) void;
pub const SetNextWindowContentSize = _1_ImGui_SetNextWindowContentSize_;

extern fn _1_ImGui_SetNextWindowCollapsed_(collapsed: bool, cond: ImGuiCond) void;
pub const SetNextWindowCollapsed = _1_ImGui_SetNextWindowCollapsed_;

extern fn _1_ImGui_SetNextWindowFocus_() void;
pub const SetNextWindowFocus = _1_ImGui_SetNextWindowFocus_;

extern fn _1_ImGui_SetNextWindowScroll_(scroll: *const ImVec2) void;
pub const SetNextWindowScroll = _1_ImGui_SetNextWindowScroll_;

extern fn _1_ImGui_SetNextWindowBgAlpha_(alpha: f32) void;
pub const SetNextWindowBgAlpha = _1_ImGui_SetNextWindowBgAlpha_;

extern fn _1_ImGui_SetNextWindowViewport_(viewport_id: ImGuiID) void;
pub const SetNextWindowViewport = _1_ImGui_SetNextWindowViewport_;

extern fn _1_ImGui_SetWindowPos_(pos: *const ImVec2, cond: ImGuiCond) void;
pub const SetWindowPos = _1_ImGui_SetWindowPos_;

extern fn _1_ImGui_SetWindowSize_(size: *const ImVec2, cond: ImGuiCond) void;
pub const SetWindowSize = _1_ImGui_SetWindowSize_;

extern fn _1_ImGui_SetWindowCollapsed_(collapsed: bool, cond: ImGuiCond) void;
pub const SetWindowCollapsed = _1_ImGui_SetWindowCollapsed_;

extern fn _1_ImGui_SetWindowFocus_() void;
pub const SetWindowFocus = _1_ImGui_SetWindowFocus_;

extern fn _1_ImGui_SetWindowFontScale_(scale: f32) void;
pub const SetWindowFontScale = _1_ImGui_SetWindowFontScale_;

extern fn _2_ImGui_SetWindowPos_(name: [*c]const u8, pos: *const ImVec2, cond: ImGuiCond) void;
pub const SetWindowPos__Overload2 = _2_ImGui_SetWindowPos_;

extern fn _2_ImGui_SetWindowSize_(name: [*c]const u8, size: *const ImVec2, cond: ImGuiCond) void;
pub const SetWindowSize__Overload2 = _2_ImGui_SetWindowSize_;

extern fn _2_ImGui_SetWindowCollapsed_(name: [*c]const u8, collapsed: bool, cond: ImGuiCond) void;
pub const SetWindowCollapsed__Overload2 = _2_ImGui_SetWindowCollapsed_;

extern fn _2_ImGui_SetWindowFocus_(name: [*c]const u8) void;
pub const SetWindowFocus__Overload2 = _2_ImGui_SetWindowFocus_;

extern fn _1_ImGui_GetContentRegionAvail_() ImVec2;
pub const GetContentRegionAvail = _1_ImGui_GetContentRegionAvail_;

extern fn _1_ImGui_GetContentRegionMax_() ImVec2;
pub const GetContentRegionMax = _1_ImGui_GetContentRegionMax_;

extern fn _1_ImGui_GetWindowContentRegionMin_() ImVec2;
pub const GetWindowContentRegionMin = _1_ImGui_GetWindowContentRegionMin_;

extern fn _1_ImGui_GetWindowContentRegionMax_() ImVec2;
pub const GetWindowContentRegionMax = _1_ImGui_GetWindowContentRegionMax_;

extern fn _1_ImGui_GetScrollX_() f32;
pub const GetScrollX = _1_ImGui_GetScrollX_;

extern fn _1_ImGui_GetScrollY_() f32;
pub const GetScrollY = _1_ImGui_GetScrollY_;

extern fn _1_ImGui_SetScrollX_(scroll_x: f32) void;
pub const SetScrollX = _1_ImGui_SetScrollX_;

extern fn _1_ImGui_SetScrollY_(scroll_y: f32) void;
pub const SetScrollY = _1_ImGui_SetScrollY_;

extern fn _1_ImGui_GetScrollMaxX_() f32;
pub const GetScrollMaxX = _1_ImGui_GetScrollMaxX_;

extern fn _1_ImGui_GetScrollMaxY_() f32;
pub const GetScrollMaxY = _1_ImGui_GetScrollMaxY_;

extern fn _1_ImGui_SetScrollHereX_(center_x_ratio: f32) void;
pub const SetScrollHereX = _1_ImGui_SetScrollHereX_;

extern fn _1_ImGui_SetScrollHereY_(center_y_ratio: f32) void;
pub const SetScrollHereY = _1_ImGui_SetScrollHereY_;

extern fn _1_ImGui_SetScrollFromPosX_(local_x: f32, center_x_ratio: f32) void;
pub const SetScrollFromPosX = _1_ImGui_SetScrollFromPosX_;

extern fn _1_ImGui_SetScrollFromPosY_(local_y: f32, center_y_ratio: f32) void;
pub const SetScrollFromPosY = _1_ImGui_SetScrollFromPosY_;

extern fn _1_ImGui_PushFont_(font: [*c]ImFont) void;
pub const PushFont = _1_ImGui_PushFont_;

extern fn _1_ImGui_PopFont_() void;
pub const PopFont = _1_ImGui_PopFont_;

extern fn _1_ImGui_PushStyleColor_(idx: ImGuiCol, col: ImU32) void;
pub const PushStyleColor = _1_ImGui_PushStyleColor_;

extern fn _2_ImGui_PushStyleColor_(idx: ImGuiCol, col: *const ImVec4) void;
pub const PushStyleColor__Overload2 = _2_ImGui_PushStyleColor_;

extern fn _1_ImGui_PopStyleColor_(count: c_int) void;
pub const PopStyleColor = _1_ImGui_PopStyleColor_;

extern fn _1_ImGui_PushStyleVar_(idx: ImGuiStyleVar, val: f32) void;
pub const PushStyleVar = _1_ImGui_PushStyleVar_;

extern fn _2_ImGui_PushStyleVar_(idx: ImGuiStyleVar, val: *const ImVec2) void;
pub const PushStyleVar__Overload2 = _2_ImGui_PushStyleVar_;

extern fn _1_ImGui_PopStyleVar_(count: c_int) void;
pub const PopStyleVar = _1_ImGui_PopStyleVar_;

extern fn _1_ImGui_PushTabStop_(tab_stop: bool) void;
pub const PushTabStop = _1_ImGui_PushTabStop_;

extern fn _1_ImGui_PopTabStop_() void;
pub const PopTabStop = _1_ImGui_PopTabStop_;

extern fn _1_ImGui_PushButtonRepeat_(repeat: bool) void;
pub const PushButtonRepeat = _1_ImGui_PushButtonRepeat_;

extern fn _1_ImGui_PopButtonRepeat_() void;
pub const PopButtonRepeat = _1_ImGui_PopButtonRepeat_;

extern fn _1_ImGui_PushItemWidth_(item_width: f32) void;
pub const PushItemWidth = _1_ImGui_PushItemWidth_;

extern fn _1_ImGui_PopItemWidth_() void;
pub const PopItemWidth = _1_ImGui_PopItemWidth_;

extern fn _1_ImGui_SetNextItemWidth_(item_width: f32) void;
pub const SetNextItemWidth = _1_ImGui_SetNextItemWidth_;

extern fn _1_ImGui_CalcItemWidth_() f32;
pub const CalcItemWidth = _1_ImGui_CalcItemWidth_;

extern fn _1_ImGui_PushTextWrapPos_(wrap_local_pos_x: f32) void;
pub const PushTextWrapPos = _1_ImGui_PushTextWrapPos_;

extern fn _1_ImGui_PopTextWrapPos_() void;
pub const PopTextWrapPos = _1_ImGui_PopTextWrapPos_;

extern fn _1_ImGui_GetFont_() [*c]ImFont;
pub const GetFont = _1_ImGui_GetFont_;

extern fn _1_ImGui_GetFontSize_() f32;
pub const GetFontSize = _1_ImGui_GetFontSize_;

extern fn _1_ImGui_GetFontTexUvWhitePixel_() ImVec2;
pub const GetFontTexUvWhitePixel = _1_ImGui_GetFontTexUvWhitePixel_;

extern fn _1_ImGui_GetColorU32_(idx: ImGuiCol, alpha_mul: f32) ImU32;
pub const GetColorU32 = _1_ImGui_GetColorU32_;

extern fn _2_ImGui_GetColorU32_(col: *const ImVec4) ImU32;
pub const GetColorU32__Overload2 = _2_ImGui_GetColorU32_;

extern fn _3_ImGui_GetColorU32_(col: ImU32) ImU32;
pub const GetColorU32__Overload3 = _3_ImGui_GetColorU32_;

extern fn _1_ImGui_GetStyleColorVec4_(idx: ImGuiCol) *const ImVec4;
pub const GetStyleColorVec4 = _1_ImGui_GetStyleColorVec4_;

extern fn _1_ImGui_Separator_() void;
pub const Separator = _1_ImGui_Separator_;

extern fn _1_ImGui_SameLine_(offset_from_start_x: f32, spacing: f32) void;
pub const SameLine = _1_ImGui_SameLine_;

extern fn _1_ImGui_NewLine_() void;
pub const NewLine = _1_ImGui_NewLine_;

extern fn _1_ImGui_Spacing_() void;
pub const Spacing = _1_ImGui_Spacing_;

extern fn _1_ImGui_Dummy_(size: *const ImVec2) void;
pub const Dummy = _1_ImGui_Dummy_;

extern fn _1_ImGui_Indent_(indent_w: f32) void;
pub const Indent = _1_ImGui_Indent_;

extern fn _1_ImGui_Unindent_(indent_w: f32) void;
pub const Unindent = _1_ImGui_Unindent_;

extern fn _1_ImGui_BeginGroup_() void;
pub const BeginGroup = _1_ImGui_BeginGroup_;

extern fn _1_ImGui_EndGroup_() void;
pub const EndGroup = _1_ImGui_EndGroup_;

extern fn _1_ImGui_GetCursorPos_() ImVec2;
pub const GetCursorPos = _1_ImGui_GetCursorPos_;

extern fn _1_ImGui_GetCursorPosX_() f32;
pub const GetCursorPosX = _1_ImGui_GetCursorPosX_;

extern fn _1_ImGui_GetCursorPosY_() f32;
pub const GetCursorPosY = _1_ImGui_GetCursorPosY_;

extern fn _1_ImGui_SetCursorPos_(local_pos: *const ImVec2) void;
pub const SetCursorPos = _1_ImGui_SetCursorPos_;

extern fn _1_ImGui_SetCursorPosX_(local_x: f32) void;
pub const SetCursorPosX = _1_ImGui_SetCursorPosX_;

extern fn _1_ImGui_SetCursorPosY_(local_y: f32) void;
pub const SetCursorPosY = _1_ImGui_SetCursorPosY_;

extern fn _1_ImGui_GetCursorStartPos_() ImVec2;
pub const GetCursorStartPos = _1_ImGui_GetCursorStartPos_;

extern fn _1_ImGui_GetCursorScreenPos_() ImVec2;
pub const GetCursorScreenPos = _1_ImGui_GetCursorScreenPos_;

extern fn _1_ImGui_SetCursorScreenPos_(pos: *const ImVec2) void;
pub const SetCursorScreenPos = _1_ImGui_SetCursorScreenPos_;

extern fn _1_ImGui_AlignTextToFramePadding_() void;
pub const AlignTextToFramePadding = _1_ImGui_AlignTextToFramePadding_;

extern fn _1_ImGui_GetTextLineHeight_() f32;
pub const GetTextLineHeight = _1_ImGui_GetTextLineHeight_;

extern fn _1_ImGui_GetTextLineHeightWithSpacing_() f32;
pub const GetTextLineHeightWithSpacing = _1_ImGui_GetTextLineHeightWithSpacing_;

extern fn _1_ImGui_GetFrameHeight_() f32;
pub const GetFrameHeight = _1_ImGui_GetFrameHeight_;

extern fn _1_ImGui_GetFrameHeightWithSpacing_() f32;
pub const GetFrameHeightWithSpacing = _1_ImGui_GetFrameHeightWithSpacing_;

extern fn _1_ImGui_PushID_(str_id: [*c]const u8) void;
pub const PushID = _1_ImGui_PushID_;

extern fn _2_ImGui_PushID_(str_id_begin: [*c]const u8, str_id_end: [*c]const u8) void;
pub const PushID__Overload2 = _2_ImGui_PushID_;

extern fn _3_ImGui_PushID_(ptr_id: ?*const anyopaque) void;
pub const PushID__Overload3 = _3_ImGui_PushID_;

extern fn _4_ImGui_PushID_(int_id: c_int) void;
pub const PushID__Overload4 = _4_ImGui_PushID_;

extern fn _1_ImGui_PopID_() void;
pub const PopID = _1_ImGui_PopID_;

extern fn _1_ImGui_GetID_(str_id: [*c]const u8) ImGuiID;
pub const GetID = _1_ImGui_GetID_;

extern fn _2_ImGui_GetID_(str_id_begin: [*c]const u8, str_id_end: [*c]const u8) ImGuiID;
pub const GetID__Overload2 = _2_ImGui_GetID_;

extern fn _3_ImGui_GetID_(ptr_id: ?*const anyopaque) ImGuiID;
pub const GetID__Overload3 = _3_ImGui_GetID_;

extern fn _1_ImGui_TextUnformatted_(text: [*c]const u8, text_end: [*c]const u8) void;
pub const TextUnformatted = _1_ImGui_TextUnformatted_;

extern fn _1_ImGui_TextV_(fmt: [*c]const u8, args: [*c]u8) void;
pub const TextV = _1_ImGui_TextV_;

extern fn _1_ImGui_TextColoredV_(col: *const ImVec4, fmt: [*c]const u8, args: [*c]u8) void;
pub const TextColoredV = _1_ImGui_TextColoredV_;

extern fn _1_ImGui_TextDisabledV_(fmt: [*c]const u8, args: [*c]u8) void;
pub const TextDisabledV = _1_ImGui_TextDisabledV_;

extern fn _1_ImGui_TextWrappedV_(fmt: [*c]const u8, args: [*c]u8) void;
pub const TextWrappedV = _1_ImGui_TextWrappedV_;

extern fn _1_ImGui_LabelTextV_(label: [*c]const u8, fmt: [*c]const u8, args: [*c]u8) void;
pub const LabelTextV = _1_ImGui_LabelTextV_;

extern fn _1_ImGui_BulletTextV_(fmt: [*c]const u8, args: [*c]u8) void;
pub const BulletTextV = _1_ImGui_BulletTextV_;

extern fn _1_ImGui_SeparatorText_(label: [*c]const u8) void;
pub const SeparatorText = _1_ImGui_SeparatorText_;

extern fn _1_ImGui_Button_(label: [*c]const u8, size: *const ImVec2) bool;
pub const Button = _1_ImGui_Button_;

extern fn _1_ImGui_SmallButton_(label: [*c]const u8) bool;
pub const SmallButton = _1_ImGui_SmallButton_;

extern fn _1_ImGui_InvisibleButton_(str_id: [*c]const u8, size: *const ImVec2, flags: ImGuiButtonFlags) bool;
pub const InvisibleButton = _1_ImGui_InvisibleButton_;

extern fn _1_ImGui_ArrowButton_(str_id: [*c]const u8, dir: ImGuiDir) bool;
pub const ArrowButton = _1_ImGui_ArrowButton_;

extern fn _1_ImGui_Checkbox_(label: [*c]const u8, v: [*c]bool) bool;
pub const Checkbox = _1_ImGui_Checkbox_;

extern fn _1_ImGui_CheckboxFlags_(label: [*c]const u8, flags: [*c]c_int, flags_value: c_int) bool;
pub const CheckboxFlags = _1_ImGui_CheckboxFlags_;

extern fn _2_ImGui_CheckboxFlags_(label: [*c]const u8, flags: [*c]c_uint, flags_value: c_uint) bool;
pub const CheckboxFlags__Overload2 = _2_ImGui_CheckboxFlags_;

extern fn _1_ImGui_RadioButton_(label: [*c]const u8, active: bool) bool;
pub const RadioButton = _1_ImGui_RadioButton_;

extern fn _2_ImGui_RadioButton_(label: [*c]const u8, v: [*c]c_int, v_button: c_int) bool;
pub const RadioButton__Overload2 = _2_ImGui_RadioButton_;

extern fn _1_ImGui_ProgressBar_(fraction: f32, size_arg: *const ImVec2, overlay: [*c]const u8) void;
pub const ProgressBar = _1_ImGui_ProgressBar_;

extern fn _1_ImGui_Bullet_() void;
pub const Bullet = _1_ImGui_Bullet_;

extern fn _1_ImGui_Image_(user_texture_id: ImTextureID, size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, tint_col: *const ImVec4, border_col: *const ImVec4) void;
pub const Image = _1_ImGui_Image_;

extern fn _1_ImGui_ImageButton_(str_id: [*c]const u8, user_texture_id: ImTextureID, size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, bg_col: *const ImVec4, tint_col: *const ImVec4) bool;
pub const ImageButton = _1_ImGui_ImageButton_;

extern fn _1_ImGui_BeginCombo_(label: [*c]const u8, preview_value: [*c]const u8, flags: ImGuiComboFlags) bool;
pub const BeginCombo = _1_ImGui_BeginCombo_;

extern fn _1_ImGui_EndCombo_() void;
pub const EndCombo = _1_ImGui_EndCombo_;

extern fn _1_ImGui_Combo_(label: [*c]const u8, current_item: [*c]c_int, items: [*c]const [*c]const u8, items_count: c_int, popup_max_height_in_items: c_int) bool;
pub const Combo = _1_ImGui_Combo_;

extern fn _2_ImGui_Combo_(label: [*c]const u8, current_item: [*c]c_int, items_separated_by_zeros: [*c]const u8, popup_max_height_in_items: c_int) bool;
pub const Combo__Overload2 = _2_ImGui_Combo_;

extern fn _3_ImGui_Combo_(label: [*c]const u8, current_item: [*c]c_int, items_getter: ?*const fn (?*anyopaque, c_int, [*c]const [*c]u8) callconv(.C) bool, data: ?*anyopaque, items_count: c_int, popup_max_height_in_items: c_int) bool;
pub const Combo__Overload3 = _3_ImGui_Combo_;

extern fn _1_ImGui_DragFloat_(label: [*c]const u8, v: [*c]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragFloat = _1_ImGui_DragFloat_;

extern fn _1_ImGui_DragFloat2_(label: [*c]const u8, v: [*c]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragFloat2 = _1_ImGui_DragFloat2_;

extern fn _1_ImGui_DragFloat3_(label: [*c]const u8, v: [*c]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragFloat3 = _1_ImGui_DragFloat3_;

extern fn _1_ImGui_DragFloat4_(label: [*c]const u8, v: [*c]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragFloat4 = _1_ImGui_DragFloat4_;

extern fn _1_ImGui_DragFloatRange2_(label: [*c]const u8, v_current_min: [*c]f32, v_current_max: [*c]f32, v_speed: f32, v_min: f32, v_max: f32, format: [*c]const u8, format_max: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragFloatRange2 = _1_ImGui_DragFloatRange2_;

extern fn _1_ImGui_DragInt_(label: [*c]const u8, v: [*c]c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragInt = _1_ImGui_DragInt_;

extern fn _1_ImGui_DragInt2_(label: [*c]const u8, v: [*c]c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragInt2 = _1_ImGui_DragInt2_;

extern fn _1_ImGui_DragInt3_(label: [*c]const u8, v: [*c]c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragInt3 = _1_ImGui_DragInt3_;

extern fn _1_ImGui_DragInt4_(label: [*c]const u8, v: [*c]c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragInt4 = _1_ImGui_DragInt4_;

extern fn _1_ImGui_DragIntRange2_(label: [*c]const u8, v_current_min: [*c]c_int, v_current_max: [*c]c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: [*c]const u8, format_max: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragIntRange2 = _1_ImGui_DragIntRange2_;

extern fn _1_ImGui_DragScalar_(label: [*c]const u8, data_type: ImGuiDataType, p_data: ?*anyopaque, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragScalar = _1_ImGui_DragScalar_;

extern fn _1_ImGui_DragScalarN_(label: [*c]const u8, data_type: ImGuiDataType, p_data: ?*anyopaque, components: c_int, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const DragScalarN = _1_ImGui_DragScalarN_;

extern fn _1_ImGui_SliderFloat_(label: [*c]const u8, v: [*c]f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderFloat = _1_ImGui_SliderFloat_;

extern fn _1_ImGui_SliderFloat2_(label: [*c]const u8, v: [*c]f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderFloat2 = _1_ImGui_SliderFloat2_;

extern fn _1_ImGui_SliderFloat3_(label: [*c]const u8, v: [*c]f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderFloat3 = _1_ImGui_SliderFloat3_;

extern fn _1_ImGui_SliderFloat4_(label: [*c]const u8, v: [*c]f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderFloat4 = _1_ImGui_SliderFloat4_;

extern fn _1_ImGui_SliderAngle_(label: [*c]const u8, v_rad: [*c]f32, v_degrees_min: f32, v_degrees_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderAngle = _1_ImGui_SliderAngle_;

extern fn _1_ImGui_SliderInt_(label: [*c]const u8, v: [*c]c_int, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderInt = _1_ImGui_SliderInt_;

extern fn _1_ImGui_SliderInt2_(label: [*c]const u8, v: [*c]c_int, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderInt2 = _1_ImGui_SliderInt2_;

extern fn _1_ImGui_SliderInt3_(label: [*c]const u8, v: [*c]c_int, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderInt3 = _1_ImGui_SliderInt3_;

extern fn _1_ImGui_SliderInt4_(label: [*c]const u8, v: [*c]c_int, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderInt4 = _1_ImGui_SliderInt4_;

extern fn _1_ImGui_SliderScalar_(label: [*c]const u8, data_type: ImGuiDataType, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderScalar = _1_ImGui_SliderScalar_;

extern fn _1_ImGui_SliderScalarN_(label: [*c]const u8, data_type: ImGuiDataType, p_data: ?*anyopaque, components: c_int, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const SliderScalarN = _1_ImGui_SliderScalarN_;

extern fn _1_ImGui_VSliderFloat_(label: [*c]const u8, size: *const ImVec2, v: [*c]f32, v_min: f32, v_max: f32, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const VSliderFloat = _1_ImGui_VSliderFloat_;

extern fn _1_ImGui_VSliderInt_(label: [*c]const u8, size: *const ImVec2, v: [*c]c_int, v_min: c_int, v_max: c_int, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const VSliderInt = _1_ImGui_VSliderInt_;

extern fn _1_ImGui_VSliderScalar_(label: [*c]const u8, size: *const ImVec2, data_type: ImGuiDataType, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: [*c]const u8, flags: ImGuiSliderFlags) bool;
pub const VSliderScalar = _1_ImGui_VSliderScalar_;

extern fn _1_ImGui_InputText_(label: [*c]const u8, buf: [*c]u8, buf_size: usize, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: ?*anyopaque) bool;
pub const InputText = _1_ImGui_InputText_;

extern fn _1_ImGui_InputTextMultiline_(label: [*c]const u8, buf: [*c]u8, buf_size: usize, size: *const ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: ?*anyopaque) bool;
pub const InputTextMultiline = _1_ImGui_InputTextMultiline_;

extern fn _1_ImGui_InputTextWithHint_(label: [*c]const u8, hint: [*c]const u8, buf: [*c]u8, buf_size: usize, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: ?*anyopaque) bool;
pub const InputTextWithHint = _1_ImGui_InputTextWithHint_;

extern fn _1_ImGui_InputFloat_(label: [*c]const u8, v: [*c]f32, step: f32, step_fast: f32, format: [*c]const u8, flags: ImGuiInputTextFlags) bool;
pub const InputFloat = _1_ImGui_InputFloat_;

extern fn _1_ImGui_InputFloat2_(label: [*c]const u8, v: [*c]f32, format: [*c]const u8, flags: ImGuiInputTextFlags) bool;
pub const InputFloat2 = _1_ImGui_InputFloat2_;

extern fn _1_ImGui_InputFloat3_(label: [*c]const u8, v: [*c]f32, format: [*c]const u8, flags: ImGuiInputTextFlags) bool;
pub const InputFloat3 = _1_ImGui_InputFloat3_;

extern fn _1_ImGui_InputFloat4_(label: [*c]const u8, v: [*c]f32, format: [*c]const u8, flags: ImGuiInputTextFlags) bool;
pub const InputFloat4 = _1_ImGui_InputFloat4_;

extern fn _1_ImGui_InputInt_(label: [*c]const u8, v: [*c]c_int, step: c_int, step_fast: c_int, flags: ImGuiInputTextFlags) bool;
pub const InputInt = _1_ImGui_InputInt_;

extern fn _1_ImGui_InputInt2_(label: [*c]const u8, v: [*c]c_int, flags: ImGuiInputTextFlags) bool;
pub const InputInt2 = _1_ImGui_InputInt2_;

extern fn _1_ImGui_InputInt3_(label: [*c]const u8, v: [*c]c_int, flags: ImGuiInputTextFlags) bool;
pub const InputInt3 = _1_ImGui_InputInt3_;

extern fn _1_ImGui_InputInt4_(label: [*c]const u8, v: [*c]c_int, flags: ImGuiInputTextFlags) bool;
pub const InputInt4 = _1_ImGui_InputInt4_;

extern fn _1_ImGui_InputDouble_(label: [*c]const u8, v: [*c]f64, step: f64, step_fast: f64, format: [*c]const u8, flags: ImGuiInputTextFlags) bool;
pub const InputDouble = _1_ImGui_InputDouble_;

extern fn _1_ImGui_InputScalar_(label: [*c]const u8, data_type: ImGuiDataType, p_data: ?*anyopaque, p_step: ?*const anyopaque, p_step_fast: ?*const anyopaque, format: [*c]const u8, flags: ImGuiInputTextFlags) bool;
pub const InputScalar = _1_ImGui_InputScalar_;

extern fn _1_ImGui_InputScalarN_(label: [*c]const u8, data_type: ImGuiDataType, p_data: ?*anyopaque, components: c_int, p_step: ?*const anyopaque, p_step_fast: ?*const anyopaque, format: [*c]const u8, flags: ImGuiInputTextFlags) bool;
pub const InputScalarN = _1_ImGui_InputScalarN_;

extern fn _1_ImGui_ColorEdit3_(label: [*c]const u8, col: [*c]f32, flags: ImGuiColorEditFlags) bool;
pub const ColorEdit3 = _1_ImGui_ColorEdit3_;

extern fn _1_ImGui_ColorEdit4_(label: [*c]const u8, col: [*c]f32, flags: ImGuiColorEditFlags) bool;
pub const ColorEdit4 = _1_ImGui_ColorEdit4_;

extern fn _1_ImGui_ColorPicker3_(label: [*c]const u8, col: [*c]f32, flags: ImGuiColorEditFlags) bool;
pub const ColorPicker3 = _1_ImGui_ColorPicker3_;

extern fn _1_ImGui_ColorPicker4_(label: [*c]const u8, col: [*c]f32, flags: ImGuiColorEditFlags, ref_col: [*c]const f32) bool;
pub const ColorPicker4 = _1_ImGui_ColorPicker4_;

extern fn _1_ImGui_ColorButton_(desc_id: [*c]const u8, col: *const ImVec4, flags: ImGuiColorEditFlags, size: *const ImVec2) bool;
pub const ColorButton = _1_ImGui_ColorButton_;

extern fn _1_ImGui_SetColorEditOptions_(flags: ImGuiColorEditFlags) void;
pub const SetColorEditOptions = _1_ImGui_SetColorEditOptions_;

extern fn _1_ImGui_TreeNode_(label: [*c]const u8) bool;
pub const TreeNode = _1_ImGui_TreeNode_;

extern fn _1_ImGui_TreeNodeV_(str_id: [*c]const u8, fmt: [*c]const u8, args: [*c]u8) bool;
pub const TreeNodeV = _1_ImGui_TreeNodeV_;

extern fn _2_ImGui_TreeNodeV_(ptr_id: ?*const anyopaque, fmt: [*c]const u8, args: [*c]u8) bool;
pub const TreeNodeV__Overload2 = _2_ImGui_TreeNodeV_;

extern fn _1_ImGui_TreeNodeEx_(label: [*c]const u8, flags: ImGuiTreeNodeFlags) bool;
pub const TreeNodeEx = _1_ImGui_TreeNodeEx_;

extern fn _1_ImGui_TreeNodeExV_(str_id: [*c]const u8, flags: ImGuiTreeNodeFlags, fmt: [*c]const u8, args: [*c]u8) bool;
pub const TreeNodeExV = _1_ImGui_TreeNodeExV_;

extern fn _2_ImGui_TreeNodeExV_(ptr_id: ?*const anyopaque, flags: ImGuiTreeNodeFlags, fmt: [*c]const u8, args: [*c]u8) bool;
pub const TreeNodeExV__Overload2 = _2_ImGui_TreeNodeExV_;

extern fn _1_ImGui_TreePush_(str_id: [*c]const u8) void;
pub const TreePush = _1_ImGui_TreePush_;

extern fn _2_ImGui_TreePush_(ptr_id: ?*const anyopaque) void;
pub const TreePush__Overload2 = _2_ImGui_TreePush_;

extern fn _1_ImGui_TreePop_() void;
pub const TreePop = _1_ImGui_TreePop_;

extern fn _1_ImGui_GetTreeNodeToLabelSpacing_() f32;
pub const GetTreeNodeToLabelSpacing = _1_ImGui_GetTreeNodeToLabelSpacing_;

extern fn _1_ImGui_CollapsingHeader_(label: [*c]const u8, flags: ImGuiTreeNodeFlags) bool;
pub const CollapsingHeader = _1_ImGui_CollapsingHeader_;

extern fn _2_ImGui_CollapsingHeader_(label: [*c]const u8, p_visible: [*c]bool, flags: ImGuiTreeNodeFlags) bool;
pub const CollapsingHeader__Overload2 = _2_ImGui_CollapsingHeader_;

extern fn _1_ImGui_SetNextItemOpen_(is_open: bool, cond: ImGuiCond) void;
pub const SetNextItemOpen = _1_ImGui_SetNextItemOpen_;

extern fn _1_ImGui_Selectable_(label: [*c]const u8, selected: bool, flags: ImGuiSelectableFlags, size: *const ImVec2) bool;
pub const Selectable = _1_ImGui_Selectable_;

extern fn _2_ImGui_Selectable_(label: [*c]const u8, p_selected: [*c]bool, flags: ImGuiSelectableFlags, size: *const ImVec2) bool;
pub const Selectable__Overload2 = _2_ImGui_Selectable_;

extern fn _1_ImGui_BeginListBox_(label: [*c]const u8, size: *const ImVec2) bool;
pub const BeginListBox = _1_ImGui_BeginListBox_;

extern fn _1_ImGui_EndListBox_() void;
pub const EndListBox = _1_ImGui_EndListBox_;

extern fn _1_ImGui_ListBox_(label: [*c]const u8, current_item: [*c]c_int, items: [*c]const [*c]const u8, items_count: c_int, height_in_items: c_int) bool;
pub const ListBox = _1_ImGui_ListBox_;

extern fn _2_ImGui_ListBox_(label: [*c]const u8, current_item: [*c]c_int, items_getter: ?*const fn (?*anyopaque, c_int, [*c]const [*c]u8) callconv(.C) bool, data: ?*anyopaque, items_count: c_int, height_in_items: c_int) bool;
pub const ListBox__Overload2 = _2_ImGui_ListBox_;

extern fn _1_ImGui_PlotLines_(label: [*c]const u8, values: [*c]const f32, values_count: c_int, values_offset: c_int, overlay_text: [*c]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: c_int) void;
pub const PlotLines = _1_ImGui_PlotLines_;

extern fn _2_ImGui_PlotLines_(label: [*c]const u8, values_getter: ?*const fn (?*anyopaque, c_int) callconv(.C) f32, data: ?*anyopaque, values_count: c_int, values_offset: c_int, overlay_text: [*c]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2) void;
pub const PlotLines__Overload2 = _2_ImGui_PlotLines_;

extern fn _1_ImGui_PlotHistogram_(label: [*c]const u8, values: [*c]const f32, values_count: c_int, values_offset: c_int, overlay_text: [*c]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: c_int) void;
pub const PlotHistogram = _1_ImGui_PlotHistogram_;

extern fn _2_ImGui_PlotHistogram_(label: [*c]const u8, values_getter: ?*const fn (?*anyopaque, c_int) callconv(.C) f32, data: ?*anyopaque, values_count: c_int, values_offset: c_int, overlay_text: [*c]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2) void;
pub const PlotHistogram__Overload2 = _2_ImGui_PlotHistogram_;

extern fn _1_ImGui_Value_(prefix: [*c]const u8, b: bool) void;
pub const Value = _1_ImGui_Value_;

extern fn _2_ImGui_Value_(prefix: [*c]const u8, v: c_int) void;
pub const Value__Overload2 = _2_ImGui_Value_;

extern fn _3_ImGui_Value_(prefix: [*c]const u8, v: c_uint) void;
pub const Value__Overload3 = _3_ImGui_Value_;

extern fn _4_ImGui_Value_(prefix: [*c]const u8, v: f32, float_format: [*c]const u8) void;
pub const Value__Overload4 = _4_ImGui_Value_;

extern fn _1_ImGui_BeginMenuBar_() bool;
pub const BeginMenuBar = _1_ImGui_BeginMenuBar_;

extern fn _1_ImGui_EndMenuBar_() void;
pub const EndMenuBar = _1_ImGui_EndMenuBar_;

extern fn _1_ImGui_BeginMainMenuBar_() bool;
pub const BeginMainMenuBar = _1_ImGui_BeginMainMenuBar_;

extern fn _1_ImGui_EndMainMenuBar_() void;
pub const EndMainMenuBar = _1_ImGui_EndMainMenuBar_;

extern fn _1_ImGui_BeginMenu_(label: [*c]const u8, enabled: bool) bool;
pub const BeginMenu = _1_ImGui_BeginMenu_;

extern fn _1_ImGui_EndMenu_() void;
pub const EndMenu = _1_ImGui_EndMenu_;

extern fn _1_ImGui_MenuItem_(label: [*c]const u8, shortcut: [*c]const u8, selected: bool, enabled: bool) bool;
pub const MenuItem = _1_ImGui_MenuItem_;

extern fn _2_ImGui_MenuItem_(label: [*c]const u8, shortcut: [*c]const u8, p_selected: [*c]bool, enabled: bool) bool;
pub const MenuItem__Overload2 = _2_ImGui_MenuItem_;

extern fn _1_ImGui_BeginTooltip_() bool;
pub const BeginTooltip = _1_ImGui_BeginTooltip_;

extern fn _1_ImGui_EndTooltip_() void;
pub const EndTooltip = _1_ImGui_EndTooltip_;

extern fn _1_ImGui_SetTooltipV_(fmt: [*c]const u8, args: [*c]u8) void;
pub const SetTooltipV = _1_ImGui_SetTooltipV_;

extern fn _1_ImGui_BeginPopup_(str_id: [*c]const u8, flags: ImGuiWindowFlags) bool;
pub const BeginPopup = _1_ImGui_BeginPopup_;

extern fn _1_ImGui_BeginPopupModal_(name: [*c]const u8, p_open: [*c]bool, flags: ImGuiWindowFlags) bool;
pub const BeginPopupModal = _1_ImGui_BeginPopupModal_;

extern fn _1_ImGui_EndPopup_() void;
pub const EndPopup = _1_ImGui_EndPopup_;

extern fn _1_ImGui_OpenPopup_(str_id: [*c]const u8, popup_flags: ImGuiPopupFlags) void;
pub const OpenPopup = _1_ImGui_OpenPopup_;

extern fn _2_ImGui_OpenPopup_(id: ImGuiID, popup_flags: ImGuiPopupFlags) void;
pub const OpenPopup__Overload2 = _2_ImGui_OpenPopup_;

extern fn _1_ImGui_OpenPopupOnItemClick_(str_id: [*c]const u8, popup_flags: ImGuiPopupFlags) void;
pub const OpenPopupOnItemClick = _1_ImGui_OpenPopupOnItemClick_;

extern fn _1_ImGui_CloseCurrentPopup_() void;
pub const CloseCurrentPopup = _1_ImGui_CloseCurrentPopup_;

extern fn _1_ImGui_BeginPopupContextItem_(str_id: [*c]const u8, popup_flags: ImGuiPopupFlags) bool;
pub const BeginPopupContextItem = _1_ImGui_BeginPopupContextItem_;

extern fn _1_ImGui_BeginPopupContextWindow_(str_id: [*c]const u8, popup_flags: ImGuiPopupFlags) bool;
pub const BeginPopupContextWindow = _1_ImGui_BeginPopupContextWindow_;

extern fn _1_ImGui_BeginPopupContextVoid_(str_id: [*c]const u8, popup_flags: ImGuiPopupFlags) bool;
pub const BeginPopupContextVoid = _1_ImGui_BeginPopupContextVoid_;

extern fn _1_ImGui_IsPopupOpen_(str_id: [*c]const u8, flags: ImGuiPopupFlags) bool;
pub const IsPopupOpen = _1_ImGui_IsPopupOpen_;

extern fn _1_ImGui_BeginTable_(str_id: [*c]const u8, column: c_int, flags: ImGuiTableFlags, outer_size: *const ImVec2, inner_width: f32) bool;
pub const BeginTable = _1_ImGui_BeginTable_;

extern fn _1_ImGui_EndTable_() void;
pub const EndTable = _1_ImGui_EndTable_;

extern fn _1_ImGui_TableNextRow_(row_flags: ImGuiTableRowFlags, min_row_height: f32) void;
pub const TableNextRow = _1_ImGui_TableNextRow_;

extern fn _1_ImGui_TableNextColumn_() bool;
pub const TableNextColumn = _1_ImGui_TableNextColumn_;

extern fn _1_ImGui_TableSetColumnIndex_(column_n: c_int) bool;
pub const TableSetColumnIndex = _1_ImGui_TableSetColumnIndex_;

extern fn _1_ImGui_TableSetupColumn_(label: [*c]const u8, flags: ImGuiTableColumnFlags, init_width_or_weight: f32, user_id: ImGuiID) void;
pub const TableSetupColumn = _1_ImGui_TableSetupColumn_;

extern fn _1_ImGui_TableSetupScrollFreeze_(cols: c_int, rows: c_int) void;
pub const TableSetupScrollFreeze = _1_ImGui_TableSetupScrollFreeze_;

extern fn _1_ImGui_TableHeadersRow_() void;
pub const TableHeadersRow = _1_ImGui_TableHeadersRow_;

extern fn _1_ImGui_TableHeader_(label: [*c]const u8) void;
pub const TableHeader = _1_ImGui_TableHeader_;

extern fn _1_ImGui_TableGetSortSpecs_() [*c]ImGuiTableSortSpecs;
pub const TableGetSortSpecs = _1_ImGui_TableGetSortSpecs_;

extern fn _1_ImGui_TableGetColumnCount_() c_int;
pub const TableGetColumnCount = _1_ImGui_TableGetColumnCount_;

extern fn _1_ImGui_TableGetColumnIndex_() c_int;
pub const TableGetColumnIndex = _1_ImGui_TableGetColumnIndex_;

extern fn _1_ImGui_TableGetRowIndex_() c_int;
pub const TableGetRowIndex = _1_ImGui_TableGetRowIndex_;

extern fn _1_ImGui_TableGetColumnName_(column_n: c_int) [*c]const u8;
pub const TableGetColumnName = _1_ImGui_TableGetColumnName_;

extern fn _1_ImGui_TableGetColumnFlags_(column_n: c_int) ImGuiTableColumnFlags;
pub const TableGetColumnFlags = _1_ImGui_TableGetColumnFlags_;

extern fn _1_ImGui_TableSetColumnEnabled_(column_n: c_int, v: bool) void;
pub const TableSetColumnEnabled = _1_ImGui_TableSetColumnEnabled_;

extern fn _1_ImGui_TableSetBgColor_(target: ImGuiTableBgTarget, color: ImU32, column_n: c_int) void;
pub const TableSetBgColor = _1_ImGui_TableSetBgColor_;

extern fn _1_ImGui_Columns_(count: c_int, id: [*c]const u8, border: bool) void;
pub const Columns = _1_ImGui_Columns_;

extern fn _1_ImGui_NextColumn_() void;
pub const NextColumn = _1_ImGui_NextColumn_;

extern fn _1_ImGui_GetColumnIndex_() c_int;
pub const GetColumnIndex = _1_ImGui_GetColumnIndex_;

extern fn _1_ImGui_GetColumnWidth_(column_index: c_int) f32;
pub const GetColumnWidth = _1_ImGui_GetColumnWidth_;

extern fn _1_ImGui_SetColumnWidth_(column_index: c_int, width: f32) void;
pub const SetColumnWidth = _1_ImGui_SetColumnWidth_;

extern fn _1_ImGui_GetColumnOffset_(column_index: c_int) f32;
pub const GetColumnOffset = _1_ImGui_GetColumnOffset_;

extern fn _1_ImGui_SetColumnOffset_(column_index: c_int, offset_x: f32) void;
pub const SetColumnOffset = _1_ImGui_SetColumnOffset_;

extern fn _1_ImGui_GetColumnsCount_() c_int;
pub const GetColumnsCount = _1_ImGui_GetColumnsCount_;

extern fn _1_ImGui_BeginTabBar_(str_id: [*c]const u8, flags: ImGuiTabBarFlags) bool;
pub const BeginTabBar = _1_ImGui_BeginTabBar_;

extern fn _1_ImGui_EndTabBar_() void;
pub const EndTabBar = _1_ImGui_EndTabBar_;

extern fn _1_ImGui_BeginTabItem_(label: [*c]const u8, p_open: [*c]bool, flags: ImGuiTabItemFlags) bool;
pub const BeginTabItem = _1_ImGui_BeginTabItem_;

extern fn _1_ImGui_EndTabItem_() void;
pub const EndTabItem = _1_ImGui_EndTabItem_;

extern fn _1_ImGui_TabItemButton_(label: [*c]const u8, flags: ImGuiTabItemFlags) bool;
pub const TabItemButton = _1_ImGui_TabItemButton_;

extern fn _1_ImGui_SetTabItemClosed_(tab_or_docked_window_label: [*c]const u8) void;
pub const SetTabItemClosed = _1_ImGui_SetTabItemClosed_;

extern fn _1_ImGui_DockSpace_(id: ImGuiID, size: *const ImVec2, flags: ImGuiDockNodeFlags, window_class: [*c]const ImGuiWindowClass) ImGuiID;
pub const DockSpace = _1_ImGui_DockSpace_;

extern fn _1_ImGui_DockSpaceOverViewport_(viewport: [*c]const ImGuiViewport, flags: ImGuiDockNodeFlags, window_class: [*c]const ImGuiWindowClass) ImGuiID;
pub const DockSpaceOverViewport = _1_ImGui_DockSpaceOverViewport_;

extern fn _1_ImGui_SetNextWindowDockID_(dock_id: ImGuiID, cond: ImGuiCond) void;
pub const SetNextWindowDockID = _1_ImGui_SetNextWindowDockID_;

extern fn _1_ImGui_SetNextWindowClass_(window_class: [*c]const ImGuiWindowClass) void;
pub const SetNextWindowClass = _1_ImGui_SetNextWindowClass_;

extern fn _1_ImGui_GetWindowDockID_() ImGuiID;
pub const GetWindowDockID = _1_ImGui_GetWindowDockID_;

extern fn _1_ImGui_IsWindowDocked_() bool;
pub const IsWindowDocked = _1_ImGui_IsWindowDocked_;

extern fn _1_ImGui_LogToTTY_(auto_open_depth: c_int) void;
pub const LogToTTY = _1_ImGui_LogToTTY_;

extern fn _1_ImGui_LogToFile_(auto_open_depth: c_int, filename: [*c]const u8) void;
pub const LogToFile = _1_ImGui_LogToFile_;

extern fn _1_ImGui_LogToClipboard_(auto_open_depth: c_int) void;
pub const LogToClipboard = _1_ImGui_LogToClipboard_;

extern fn _1_ImGui_LogFinish_() void;
pub const LogFinish = _1_ImGui_LogFinish_;

extern fn _1_ImGui_LogButtons_() void;
pub const LogButtons = _1_ImGui_LogButtons_;

extern fn _1_ImGui_LogTextV_(fmt: [*c]const u8, args: [*c]u8) void;
pub const LogTextV = _1_ImGui_LogTextV_;

extern fn _1_ImGui_BeginDragDropSource_(flags: ImGuiDragDropFlags) bool;
pub const BeginDragDropSource = _1_ImGui_BeginDragDropSource_;

extern fn _1_ImGui_SetDragDropPayload_(type: [*c]const u8, data: ?*const anyopaque, sz: usize, cond: ImGuiCond) bool;
pub const SetDragDropPayload = _1_ImGui_SetDragDropPayload_;

extern fn _1_ImGui_EndDragDropSource_() void;
pub const EndDragDropSource = _1_ImGui_EndDragDropSource_;

extern fn _1_ImGui_BeginDragDropTarget_() bool;
pub const BeginDragDropTarget = _1_ImGui_BeginDragDropTarget_;

extern fn _1_ImGui_AcceptDragDropPayload_(type: [*c]const u8, flags: ImGuiDragDropFlags) [*c]const ImGuiPayload;
pub const AcceptDragDropPayload = _1_ImGui_AcceptDragDropPayload_;

extern fn _1_ImGui_EndDragDropTarget_() void;
pub const EndDragDropTarget = _1_ImGui_EndDragDropTarget_;

extern fn _1_ImGui_GetDragDropPayload_() [*c]const ImGuiPayload;
pub const GetDragDropPayload = _1_ImGui_GetDragDropPayload_;

extern fn _1_ImGui_BeginDisabled_(disabled: bool) void;
pub const BeginDisabled = _1_ImGui_BeginDisabled_;

extern fn _1_ImGui_EndDisabled_() void;
pub const EndDisabled = _1_ImGui_EndDisabled_;

extern fn _1_ImGui_PushClipRect_(clip_rect_min: *const ImVec2, clip_rect_max: *const ImVec2, intersect_with_current_clip_rect: bool) void;
pub const PushClipRect = _1_ImGui_PushClipRect_;

extern fn _1_ImGui_PopClipRect_() void;
pub const PopClipRect = _1_ImGui_PopClipRect_;

extern fn _1_ImGui_SetItemDefaultFocus_() void;
pub const SetItemDefaultFocus = _1_ImGui_SetItemDefaultFocus_;

extern fn _1_ImGui_SetKeyboardFocusHere_(offset: c_int) void;
pub const SetKeyboardFocusHere = _1_ImGui_SetKeyboardFocusHere_;

extern fn _1_ImGui_IsItemHovered_(flags: ImGuiHoveredFlags) bool;
pub const IsItemHovered = _1_ImGui_IsItemHovered_;

extern fn _1_ImGui_IsItemActive_() bool;
pub const IsItemActive = _1_ImGui_IsItemActive_;

extern fn _1_ImGui_IsItemFocused_() bool;
pub const IsItemFocused = _1_ImGui_IsItemFocused_;

extern fn _1_ImGui_IsItemClicked_(mouse_button: ImGuiMouseButton) bool;
pub const IsItemClicked = _1_ImGui_IsItemClicked_;

extern fn _1_ImGui_IsItemVisible_() bool;
pub const IsItemVisible = _1_ImGui_IsItemVisible_;

extern fn _1_ImGui_IsItemEdited_() bool;
pub const IsItemEdited = _1_ImGui_IsItemEdited_;

extern fn _1_ImGui_IsItemActivated_() bool;
pub const IsItemActivated = _1_ImGui_IsItemActivated_;

extern fn _1_ImGui_IsItemDeactivated_() bool;
pub const IsItemDeactivated = _1_ImGui_IsItemDeactivated_;

extern fn _1_ImGui_IsItemDeactivatedAfterEdit_() bool;
pub const IsItemDeactivatedAfterEdit = _1_ImGui_IsItemDeactivatedAfterEdit_;

extern fn _1_ImGui_IsItemToggledOpen_() bool;
pub const IsItemToggledOpen = _1_ImGui_IsItemToggledOpen_;

extern fn _1_ImGui_IsAnyItemHovered_() bool;
pub const IsAnyItemHovered = _1_ImGui_IsAnyItemHovered_;

extern fn _1_ImGui_IsAnyItemActive_() bool;
pub const IsAnyItemActive = _1_ImGui_IsAnyItemActive_;

extern fn _1_ImGui_IsAnyItemFocused_() bool;
pub const IsAnyItemFocused = _1_ImGui_IsAnyItemFocused_;

extern fn _1_ImGui_GetItemID_() ImGuiID;
pub const GetItemID = _1_ImGui_GetItemID_;

extern fn _1_ImGui_GetItemRectMin_() ImVec2;
pub const GetItemRectMin = _1_ImGui_GetItemRectMin_;

extern fn _1_ImGui_GetItemRectMax_() ImVec2;
pub const GetItemRectMax = _1_ImGui_GetItemRectMax_;

extern fn _1_ImGui_GetItemRectSize_() ImVec2;
pub const GetItemRectSize = _1_ImGui_GetItemRectSize_;

extern fn _1_ImGui_SetItemAllowOverlap_() void;
pub const SetItemAllowOverlap = _1_ImGui_SetItemAllowOverlap_;

extern fn _1_ImGui_GetMainViewport_() [*c]ImGuiViewport;
pub const GetMainViewport = _1_ImGui_GetMainViewport_;

extern fn _1_ImGui_GetBackgroundDrawList_() [*c]ImDrawList;
pub const GetBackgroundDrawList = _1_ImGui_GetBackgroundDrawList_;

extern fn _1_ImGui_GetForegroundDrawList_() [*c]ImDrawList;
pub const GetForegroundDrawList = _1_ImGui_GetForegroundDrawList_;

extern fn _2_ImGui_GetBackgroundDrawList_(viewport: [*c]ImGuiViewport) [*c]ImDrawList;
pub const GetBackgroundDrawList__Overload2 = _2_ImGui_GetBackgroundDrawList_;

extern fn _2_ImGui_GetForegroundDrawList_(viewport: [*c]ImGuiViewport) [*c]ImDrawList;
pub const GetForegroundDrawList__Overload2 = _2_ImGui_GetForegroundDrawList_;

extern fn _1_ImGui_IsRectVisible_(size: *const ImVec2) bool;
pub const IsRectVisible = _1_ImGui_IsRectVisible_;

extern fn _2_ImGui_IsRectVisible_(rect_min: *const ImVec2, rect_max: *const ImVec2) bool;
pub const IsRectVisible__Overload2 = _2_ImGui_IsRectVisible_;

extern fn _1_ImGui_GetTime_() f64;
pub const GetTime = _1_ImGui_GetTime_;

extern fn _1_ImGui_GetFrameCount_() c_int;
pub const GetFrameCount = _1_ImGui_GetFrameCount_;

extern fn _1_ImGui_GetDrawListSharedData_() [*c]ImDrawListSharedData;
pub const GetDrawListSharedData = _1_ImGui_GetDrawListSharedData_;

extern fn _1_ImGui_GetStyleColorName_(idx: ImGuiCol) [*c]const u8;
pub const GetStyleColorName = _1_ImGui_GetStyleColorName_;

extern fn _1_ImGui_SetStateStorage_(storage: [*c]ImGuiStorage) void;
pub const SetStateStorage = _1_ImGui_SetStateStorage_;

extern fn _1_ImGui_GetStateStorage_() [*c]ImGuiStorage;
pub const GetStateStorage = _1_ImGui_GetStateStorage_;

extern fn _1_ImGui_BeginChildFrame_(id: ImGuiID, size: *const ImVec2, flags: ImGuiWindowFlags) bool;
pub const BeginChildFrame = _1_ImGui_BeginChildFrame_;

extern fn _1_ImGui_EndChildFrame_() void;
pub const EndChildFrame = _1_ImGui_EndChildFrame_;

extern fn _1_ImGui_CalcTextSize_(text: [*c]const u8, text_end: [*c]const u8, hide_text_after_double_hash: bool, wrap_width: f32) ImVec2;
pub const CalcTextSize = _1_ImGui_CalcTextSize_;

extern fn _1_ImGui_ColorConvertU32ToFloat4_(in: ImU32) ImVec4;
pub const ColorConvertU32ToFloat4 = _1_ImGui_ColorConvertU32ToFloat4_;

extern fn _1_ImGui_ColorConvertFloat4ToU32_(in: *const ImVec4) ImU32;
pub const ColorConvertFloat4ToU32 = _1_ImGui_ColorConvertFloat4ToU32_;

extern fn _1_ImGui_ColorConvertRGBtoHSV_(r: f32, g: f32, b: f32, out_h: *f32, out_s: *f32, out_v: *f32) void;
pub const ColorConvertRGBtoHSV = _1_ImGui_ColorConvertRGBtoHSV_;

extern fn _1_ImGui_ColorConvertHSVtoRGB_(h: f32, s: f32, v: f32, out_r: *f32, out_g: *f32, out_b: *f32) void;
pub const ColorConvertHSVtoRGB = _1_ImGui_ColorConvertHSVtoRGB_;

extern fn _1_ImGui_IsKeyDown_(key: ImGuiKey) bool;
pub const IsKeyDown = _1_ImGui_IsKeyDown_;

extern fn _1_ImGui_IsKeyPressed_(key: ImGuiKey, repeat: bool) bool;
pub const IsKeyPressed = _1_ImGui_IsKeyPressed_;

extern fn _1_ImGui_IsKeyReleased_(key: ImGuiKey) bool;
pub const IsKeyReleased = _1_ImGui_IsKeyReleased_;

extern fn _1_ImGui_GetKeyPressedAmount_(key: ImGuiKey, repeat_delay: f32, rate: f32) c_int;
pub const GetKeyPressedAmount = _1_ImGui_GetKeyPressedAmount_;

extern fn _1_ImGui_GetKeyName_(key: ImGuiKey) [*c]const u8;
pub const GetKeyName = _1_ImGui_GetKeyName_;

extern fn _1_ImGui_SetNextFrameWantCaptureKeyboard_(want_capture_keyboard: bool) void;
pub const SetNextFrameWantCaptureKeyboard = _1_ImGui_SetNextFrameWantCaptureKeyboard_;

extern fn _1_ImGui_IsMouseDown_(button: ImGuiMouseButton) bool;
pub const IsMouseDown = _1_ImGui_IsMouseDown_;

extern fn _1_ImGui_IsMouseClicked_(button: ImGuiMouseButton, repeat: bool) bool;
pub const IsMouseClicked = _1_ImGui_IsMouseClicked_;

extern fn _1_ImGui_IsMouseReleased_(button: ImGuiMouseButton) bool;
pub const IsMouseReleased = _1_ImGui_IsMouseReleased_;

extern fn _1_ImGui_IsMouseDoubleClicked_(button: ImGuiMouseButton) bool;
pub const IsMouseDoubleClicked = _1_ImGui_IsMouseDoubleClicked_;

extern fn _1_ImGui_GetMouseClickedCount_(button: ImGuiMouseButton) c_int;
pub const GetMouseClickedCount = _1_ImGui_GetMouseClickedCount_;

extern fn _1_ImGui_IsMouseHoveringRect_(r_min: *const ImVec2, r_max: *const ImVec2, clip: bool) bool;
pub const IsMouseHoveringRect = _1_ImGui_IsMouseHoveringRect_;

extern fn _1_ImGui_IsMousePosValid_(mouse_pos: [*c]const ImVec2) bool;
pub const IsMousePosValid = _1_ImGui_IsMousePosValid_;

extern fn _1_ImGui_IsAnyMouseDown_() bool;
pub const IsAnyMouseDown = _1_ImGui_IsAnyMouseDown_;

extern fn _1_ImGui_GetMousePos_() ImVec2;
pub const GetMousePos = _1_ImGui_GetMousePos_;

extern fn _1_ImGui_GetMousePosOnOpeningCurrentPopup_() ImVec2;
pub const GetMousePosOnOpeningCurrentPopup = _1_ImGui_GetMousePosOnOpeningCurrentPopup_;

extern fn _1_ImGui_IsMouseDragging_(button: ImGuiMouseButton, lock_threshold: f32) bool;
pub const IsMouseDragging = _1_ImGui_IsMouseDragging_;

extern fn _1_ImGui_GetMouseDragDelta_(button: ImGuiMouseButton, lock_threshold: f32) ImVec2;
pub const GetMouseDragDelta = _1_ImGui_GetMouseDragDelta_;

extern fn _1_ImGui_ResetMouseDragDelta_(button: ImGuiMouseButton) void;
pub const ResetMouseDragDelta = _1_ImGui_ResetMouseDragDelta_;

extern fn _1_ImGui_GetMouseCursor_() ImGuiMouseCursor;
pub const GetMouseCursor = _1_ImGui_GetMouseCursor_;

extern fn _1_ImGui_SetMouseCursor_(cursor_type: ImGuiMouseCursor) void;
pub const SetMouseCursor = _1_ImGui_SetMouseCursor_;

extern fn _1_ImGui_SetNextFrameWantCaptureMouse_(want_capture_mouse: bool) void;
pub const SetNextFrameWantCaptureMouse = _1_ImGui_SetNextFrameWantCaptureMouse_;

extern fn _1_ImGui_GetClipboardText_() [*c]const u8;
pub const GetClipboardText = _1_ImGui_GetClipboardText_;

extern fn _1_ImGui_SetClipboardText_(text: [*c]const u8) void;
pub const SetClipboardText = _1_ImGui_SetClipboardText_;

extern fn _1_ImGui_LoadIniSettingsFromDisk_(ini_filename: [*c]const u8) void;
pub const LoadIniSettingsFromDisk = _1_ImGui_LoadIniSettingsFromDisk_;

extern fn _1_ImGui_LoadIniSettingsFromMemory_(ini_data: [*c]const u8, ini_size: usize) void;
pub const LoadIniSettingsFromMemory = _1_ImGui_LoadIniSettingsFromMemory_;

extern fn _1_ImGui_SaveIniSettingsToDisk_(ini_filename: [*c]const u8) void;
pub const SaveIniSettingsToDisk = _1_ImGui_SaveIniSettingsToDisk_;

extern fn _1_ImGui_SaveIniSettingsToMemory_(out_ini_size: [*c]usize) [*c]const u8;
pub const SaveIniSettingsToMemory = _1_ImGui_SaveIniSettingsToMemory_;

extern fn _1_ImGui_DebugTextEncoding_(text: [*c]const u8) void;
pub const DebugTextEncoding = _1_ImGui_DebugTextEncoding_;

extern fn _1_ImGui_DebugCheckVersionAndDataLayout_(version_str: [*c]const u8, sz_io: usize, sz_style: usize, sz_vec2: usize, sz_vec4: usize, sz_drawvert: usize, sz_drawidx: usize) bool;
pub const DebugCheckVersionAndDataLayout = _1_ImGui_DebugCheckVersionAndDataLayout_;

extern fn _1_ImGui_SetAllocatorFunctions_(alloc_func: ImGuiMemAllocFunc, free_func: ImGuiMemFreeFunc, user_data: ?*anyopaque) void;
pub const SetAllocatorFunctions = _1_ImGui_SetAllocatorFunctions_;

extern fn _1_ImGui_GetAllocatorFunctions_(p_alloc_func: [*c]ImGuiMemAllocFunc, p_free_func: [*c]ImGuiMemFreeFunc, p_user_data: [*c]?*anyopaque) void;
pub const GetAllocatorFunctions = _1_ImGui_GetAllocatorFunctions_;

extern fn _1_ImGui_MemAlloc_(size: usize) ?*anyopaque;
pub const MemAlloc = _1_ImGui_MemAlloc_;

extern fn _1_ImGui_MemFree_(ptr: ?*anyopaque) void;
pub const MemFree = _1_ImGui_MemFree_;

extern fn _1_ImGui_GetPlatformIO_() *ImGuiPlatformIO;
pub const GetPlatformIO = _1_ImGui_GetPlatformIO_;

extern fn _1_ImGui_UpdatePlatformWindows_() void;
pub const UpdatePlatformWindows = _1_ImGui_UpdatePlatformWindows_;

extern fn _1_ImGui_RenderPlatformWindowsDefault_(platform_render_arg: ?*anyopaque, renderer_render_arg: ?*anyopaque) void;
pub const RenderPlatformWindowsDefault = _1_ImGui_RenderPlatformWindowsDefault_;

extern fn _1_ImGui_DestroyPlatformWindows_() void;
pub const DestroyPlatformWindows = _1_ImGui_DestroyPlatformWindows_;

extern fn _1_ImGui_FindViewportByID_(id: ImGuiID) [*c]ImGuiViewport;
pub const FindViewportByID = _1_ImGui_FindViewportByID_;

extern fn _1_ImGui_FindViewportByPlatformHandle_(platform_handle: ?*anyopaque) [*c]ImGuiViewport;
pub const FindViewportByPlatformHandle = _1_ImGui_FindViewportByPlatformHandle_;

pub const ImGuiWindowFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const NoTitleBar: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const NoResize: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const NoMove: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoScrollbar: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoScrollWithMouse: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoCollapse: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const AlwaysAutoResize: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const NoBackground: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const NoSavedSettings: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const NoMouseInputs: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const MenuBar: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const HorizontalScrollbar: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const NoFocusOnAppearing: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const NoBringToFrontOnFocus: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 13) };
    pub const AlwaysVerticalScrollbar: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 14) };
    pub const AlwaysHorizontalScrollbar: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 15) };
    pub const AlwaysUseWindowPadding: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 16) };
    pub const NoNavInputs: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 18) };
    pub const NoNavFocus: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 19) };
    pub const UnsavedDocument: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 20) };
    pub const NoDocking: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 21) };
    pub const NoNav: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, ImGuiWindowFlags.NoNavInputs.bits | ImGuiWindowFlags.NoNavFocus.bits) };
    pub const NoDecoration: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, ImGuiWindowFlags.NoTitleBar.bits | ImGuiWindowFlags.NoResize.bits | ImGuiWindowFlags.NoScrollbar.bits | ImGuiWindowFlags.NoCollapse.bits) };
    pub const NoInputs: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, ImGuiWindowFlags.NoMouseInputs.bits | ImGuiWindowFlags.NoNavInputs.bits | ImGuiWindowFlags.NoNavFocus.bits) };
    pub const NavFlattened: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 23) };
    pub const ChildWindow: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 24) };
    pub const Tooltip: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 25) };
    pub const Popup: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 26) };
    pub const Modal: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 27) };
    pub const ChildMenu: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 28) };
    pub const DockNodeHost: ImGuiWindowFlags = .{ .bits = @intCast(c_uint, 1 << 29) };

    pub usingnamespace cpp.FlagsMixin(ImGuiWindowFlags);
};

pub const ImGuiInputTextFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const CharsDecimal: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const CharsHexadecimal: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const CharsUppercase: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const CharsNoBlank: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const AutoSelectAll: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const EnterReturnsTrue: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const CallbackCompletion: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const CallbackHistory: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const CallbackAlways: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const CallbackCharFilter: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const AllowTabInput: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const CtrlEnterForNewLine: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const NoHorizontalScroll: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const AlwaysOverwrite: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 13) };
    pub const ReadOnly: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 14) };
    pub const Password: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 15) };
    pub const NoUndoRedo: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 16) };
    pub const CharsScientific: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 17) };
    pub const CallbackResize: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 18) };
    pub const CallbackEdit: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 19) };
    pub const EscapeClearsAll: ImGuiInputTextFlags = .{ .bits = @intCast(c_uint, 1 << 20) };

    pub usingnamespace cpp.FlagsMixin(ImGuiInputTextFlags);
};

pub const ImGuiTreeNodeFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const Selected: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const Framed: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const AllowItemOverlap: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoTreePushOnOpen: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoAutoOpenOnLog: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const DefaultOpen: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const OpenOnDoubleClick: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const OpenOnArrow: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const Leaf: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const Bullet: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const FramePadding: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const SpanAvailWidth: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const SpanFullWidth: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const NavLeftJumpsBackHere: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, 1 << 13) };
    pub const CollapsingHeader: ImGuiTreeNodeFlags = .{ .bits = @intCast(c_uint, ImGuiTreeNodeFlags.Framed.bits | ImGuiTreeNodeFlags.NoTreePushOnOpen.bits | ImGuiTreeNodeFlags.NoAutoOpenOnLog.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiTreeNodeFlags);
};

pub const ImGuiPopupFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const MouseButtonLeft: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const MouseButtonRight: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 1) };
    pub const MouseButtonMiddle: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 2) };
    pub const MouseButtonMask: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 31) };
    pub const MouseButtonDefault: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 1) };
    pub const NoOpenOverExistingPopup: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const NoOpenOverItems: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const AnyPopupId: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const AnyPopupLevel: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const AnyPopup: ImGuiPopupFlags = .{ .bits = @intCast(c_uint, ImGuiPopupFlags.AnyPopupId.bits | ImGuiPopupFlags.AnyPopupLevel.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiPopupFlags);
};

pub const ImGuiSelectableFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiSelectableFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const DontClosePopups: ImGuiSelectableFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const SpanAllColumns: ImGuiSelectableFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const AllowDoubleClick: ImGuiSelectableFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const Disabled: ImGuiSelectableFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const AllowItemOverlap: ImGuiSelectableFlags = .{ .bits = @intCast(c_uint, 1 << 4) };

    pub usingnamespace cpp.FlagsMixin(ImGuiSelectableFlags);
};

pub const ImGuiComboFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const PopupAlignLeft: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const HeightSmall: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const HeightRegular: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const HeightLarge: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const HeightLargest: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoArrowButton: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const NoPreview: ImGuiComboFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const HeightMask_: ImGuiComboFlags = .{ .bits = @intCast(c_uint, ImGuiComboFlags.HeightSmall.bits | ImGuiComboFlags.HeightRegular.bits | ImGuiComboFlags.HeightLarge.bits | ImGuiComboFlags.HeightLargest.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiComboFlags);
};

pub const ImGuiTabBarFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const Reorderable: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const AutoSelectNewTabs: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const TabListPopupButton: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoCloseWithMiddleMouseButton: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoTabListScrollingButtons: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoTooltip: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const FittingPolicyResizeDown: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const FittingPolicyScroll: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const FittingPolicyMask_: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, ImGuiTabBarFlags.FittingPolicyResizeDown.bits | ImGuiTabBarFlags.FittingPolicyScroll.bits) };
    pub const FittingPolicyDefault_: ImGuiTabBarFlags = .{ .bits = @intCast(c_uint, ImGuiTabBarFlags.FittingPolicyResizeDown.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiTabBarFlags);
};

pub const ImGuiTabItemFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const UnsavedDocument: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const SetSelected: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const NoCloseWithMiddleMouseButton: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoPushId: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoTooltip: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoReorder: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const Leading: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const Trailing: ImGuiTabItemFlags = .{ .bits = @intCast(c_uint, 1 << 7) };

    pub usingnamespace cpp.FlagsMixin(ImGuiTabItemFlags);
};

pub const ImGuiTableFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const Resizable: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const Reorderable: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const Hideable: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const Sortable: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoSavedSettings: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const ContextMenuInBody: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const RowBg: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const BordersInnerH: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const BordersOuterH: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const BordersInnerV: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const BordersOuterV: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const BordersH: ImGuiTableFlags = .{ .bits = @intCast(c_uint, ImGuiTableFlags.BordersInnerH.bits | ImGuiTableFlags.BordersOuterH.bits) };
    pub const BordersV: ImGuiTableFlags = .{ .bits = @intCast(c_uint, ImGuiTableFlags.BordersInnerV.bits | ImGuiTableFlags.BordersOuterV.bits) };
    pub const BordersInner: ImGuiTableFlags = .{ .bits = @intCast(c_uint, ImGuiTableFlags.BordersInnerV.bits | ImGuiTableFlags.BordersInnerH.bits) };
    pub const BordersOuter: ImGuiTableFlags = .{ .bits = @intCast(c_uint, ImGuiTableFlags.BordersOuterV.bits | ImGuiTableFlags.BordersOuterH.bits) };
    pub const Borders: ImGuiTableFlags = .{ .bits = @intCast(c_uint, ImGuiTableFlags.BordersInner.bits | ImGuiTableFlags.BordersOuter.bits) };
    pub const NoBordersInBody: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const NoBordersInBodyUntilResize: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const SizingFixedFit: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 13) };
    pub const SizingFixedSame: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 2 << 13) };
    pub const SizingStretchProp: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 3 << 13) };
    pub const SizingStretchSame: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 4 << 13) };
    pub const NoHostExtendX: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 16) };
    pub const NoHostExtendY: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 17) };
    pub const NoKeepColumnsVisible: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 18) };
    pub const PreciseWidths: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 19) };
    pub const NoClip: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 20) };
    pub const PadOuterX: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 21) };
    pub const NoPadOuterX: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 22) };
    pub const NoPadInnerX: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 23) };
    pub const ScrollX: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 24) };
    pub const ScrollY: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 25) };
    pub const SortMulti: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 26) };
    pub const SortTristate: ImGuiTableFlags = .{ .bits = @intCast(c_uint, 1 << 27) };
    pub const SizingMask_: ImGuiTableFlags = .{ .bits = @intCast(c_uint, ImGuiTableFlags.SizingFixedFit.bits | ImGuiTableFlags.SizingFixedSame.bits | ImGuiTableFlags.SizingStretchProp.bits | ImGuiTableFlags.SizingStretchSame.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiTableFlags);
};

pub const ImGuiTableColumnFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const Disabled: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const DefaultHide: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const DefaultSort: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const WidthStretch: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const WidthFixed: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoResize: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const NoReorder: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const NoHide: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const NoClip: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const NoSort: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const NoSortAscending: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const NoSortDescending: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const NoHeaderLabel: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const NoHeaderWidth: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 13) };
    pub const PreferSortAscending: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 14) };
    pub const PreferSortDescending: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 15) };
    pub const IndentEnable: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 16) };
    pub const IndentDisable: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 17) };
    pub const IsEnabled: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 24) };
    pub const IsVisible: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 25) };
    pub const IsSorted: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 26) };
    pub const IsHovered: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 27) };
    pub const WidthMask_: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, ImGuiTableColumnFlags.WidthStretch.bits | ImGuiTableColumnFlags.WidthFixed.bits) };
    pub const IndentMask_: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, ImGuiTableColumnFlags.IndentEnable.bits | ImGuiTableColumnFlags.IndentDisable.bits) };
    pub const StatusMask_: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, ImGuiTableColumnFlags.IsEnabled.bits | ImGuiTableColumnFlags.IsVisible.bits | ImGuiTableColumnFlags.IsSorted.bits | ImGuiTableColumnFlags.IsHovered.bits) };
    pub const NoDirectResize_: ImGuiTableColumnFlags = .{ .bits = @intCast(c_uint, 1 << 30) };

    pub usingnamespace cpp.FlagsMixin(ImGuiTableColumnFlags);
};

pub const ImGuiTableRowFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiTableRowFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const Headers: ImGuiTableRowFlags = .{ .bits = @intCast(c_uint, 1 << 0) };

    pub usingnamespace cpp.FlagsMixin(ImGuiTableRowFlags);
};

pub const ImGuiTableBgTarget = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiTableBgTarget = .{ .bits = @intCast(c_uint, 0) };
    pub const RowBg0: ImGuiTableBgTarget = .{ .bits = @intCast(c_uint, 1) };
    pub const RowBg1: ImGuiTableBgTarget = .{ .bits = @intCast(c_uint, 2) };
    pub const CellBg: ImGuiTableBgTarget = .{ .bits = @intCast(c_uint, 3) };

    // pub usingnamespace cpp.FlagsMixin(ImGuiTableBgTarget_);
};

pub const ImGuiFocusedFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiFocusedFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const ChildWindows: ImGuiFocusedFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const RootWindow: ImGuiFocusedFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const AnyWindow: ImGuiFocusedFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoPopupHierarchy: ImGuiFocusedFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const DockHierarchy: ImGuiFocusedFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const RootAndChildWindows: ImGuiFocusedFlags = .{ .bits = @intCast(c_uint, ImGuiFocusedFlags.RootWindow.bits | ImGuiFocusedFlags.ChildWindows.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiFocusedFlags);
};

pub const ImGuiHoveredFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const ChildWindows: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const RootWindow: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const AnyWindow: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoPopupHierarchy: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const DockHierarchy: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const AllowWhenBlockedByPopup: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const AllowWhenBlockedByActiveItem: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const AllowWhenOverlapped: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const AllowWhenDisabled: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const NoNavOverride: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const RectOnly: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, ImGuiHoveredFlags.AllowWhenBlockedByPopup.bits | ImGuiHoveredFlags.AllowWhenBlockedByActiveItem.bits | ImGuiHoveredFlags.AllowWhenOverlapped.bits) };
    pub const RootAndChildWindows: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, ImGuiHoveredFlags.RootWindow.bits | ImGuiHoveredFlags.ChildWindows.bits) };
    pub const DelayNormal: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const DelayShort: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const NoSharedDelay: ImGuiHoveredFlags = .{ .bits = @intCast(c_uint, 1 << 13) };

    pub usingnamespace cpp.FlagsMixin(ImGuiHoveredFlags);
};

pub const ImGuiDockNodeFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiDockNodeFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const KeepAliveOnly: ImGuiDockNodeFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const NoDockingInCentralNode: ImGuiDockNodeFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const PassthruCentralNode: ImGuiDockNodeFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoSplit: ImGuiDockNodeFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoResize: ImGuiDockNodeFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const AutoHideTabBar: ImGuiDockNodeFlags = .{ .bits = @intCast(c_uint, 1 << 6) };

    pub usingnamespace cpp.FlagsMixin(ImGuiDockNodeFlags);
};

pub const ImGuiDragDropFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const SourceNoPreviewTooltip: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const SourceNoDisableHover: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const SourceNoHoldToOpenOthers: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const SourceAllowNullID: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const SourceExtern: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const SourceAutoExpirePayload: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const AcceptBeforeDelivery: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const AcceptNoDrawDefaultRect: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const AcceptNoPreviewTooltip: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const AcceptPeekOnly: ImGuiDragDropFlags = .{ .bits = @intCast(c_uint, ImGuiDragDropFlags.AcceptBeforeDelivery.bits | ImGuiDragDropFlags.AcceptNoDrawDefaultRect.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiDragDropFlags);
};

pub const ImGuiDataType = extern struct {
    bits: c_int = 0,

    pub const S8: ImGuiDataType = .{ .bits = 0 };
    pub const U8: ImGuiDataType = .{ .bits = 1 };
    pub const S16: ImGuiDataType = .{ .bits = 2 };
    pub const U16: ImGuiDataType = .{ .bits = 3 };
    pub const S32: ImGuiDataType = .{ .bits = 4 };
    pub const U32: ImGuiDataType = .{ .bits = 5 };
    pub const S64: ImGuiDataType = .{ .bits = 6 };
    pub const U64: ImGuiDataType = .{ .bits = 7 };
    pub const Float: ImGuiDataType = .{ .bits = 8 };
    pub const Double: ImGuiDataType = .{ .bits = 9 };
    pub const COUNT: ImGuiDataType = .{ .bits = 10 };

    // pub usingnamespace cpp.FlagsMixin(ImGuiDataType_);
};

pub const ImGuiDir = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiDir = .{ .bits = -1 };
    pub const Left: ImGuiDir = .{ .bits = 0 };
    pub const Right: ImGuiDir = .{ .bits = 1 };
    pub const Up: ImGuiDir = .{ .bits = 2 };
    pub const Down: ImGuiDir = .{ .bits = 3 };
    pub const COUNT: ImGuiDir = .{ .bits = ImGuiDir.Down.bits + 1 };

    // pub usingnamespace cpp.FlagsMixin(ImGuiDir_);
};

pub const ImGuiSortDirection = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiSortDirection = .{ .bits = @intCast(c_uint, 0) };
    pub const Ascending: ImGuiSortDirection = .{ .bits = @intCast(c_uint, 1) };
    pub const Descending: ImGuiSortDirection = .{ .bits = @intCast(c_uint, 2) };

    // pub usingnamespace cpp.FlagsMixin(ImGuiSortDirection_);
};

pub const ImGuiKey = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiKey = .{ .bits = 0 };
    pub const Tab: ImGuiKey = .{ .bits = 512 };
    pub const LeftArrow: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 1 };
    pub const RightArrow: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 2 };
    pub const UpArrow: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 3 };
    pub const DownArrow: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 4 };
    pub const PageUp: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 5 };
    pub const PageDown: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 6 };
    pub const Home: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 7 };
    pub const End: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 8 };
    pub const Insert: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 9 };
    pub const Delete: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 10 };
    pub const Backspace: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 11 };
    pub const Space: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 12 };
    pub const Enter: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 13 };
    pub const Escape: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 14 };
    pub const LeftCtrl: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 15 };
    pub const LeftShift: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 16 };
    pub const LeftAlt: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 17 };
    pub const LeftSuper: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 18 };
    pub const RightCtrl: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 19 };
    pub const RightShift: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 20 };
    pub const RightAlt: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 21 };
    pub const RightSuper: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 22 };
    pub const Menu: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 23 };
    pub const Alpha0: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 24 };
    pub const Alpha1: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 25 };
    pub const Alpha2: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 26 };
    pub const Alpha3: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 27 };
    pub const Alpha4: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 28 };
    pub const Alpha5: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 29 };
    pub const Alpha6: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 30 };
    pub const Alpha7: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 31 };
    pub const Alpha8: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 32 };
    pub const Alpha9: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 33 };
    pub const A: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 34 };
    pub const B: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 35 };
    pub const C: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 36 };
    pub const D: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 37 };
    pub const E: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 38 };
    pub const F: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 39 };
    pub const G: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 40 };
    pub const H: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 41 };
    pub const I: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 42 };
    pub const J: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 43 };
    pub const K: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 44 };
    pub const L: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 45 };
    pub const M: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 46 };
    pub const N: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 47 };
    pub const O: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 48 };
    pub const P: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 49 };
    pub const Q: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 50 };
    pub const R: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 51 };
    pub const S: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 52 };
    pub const T: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 53 };
    pub const U: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 54 };
    pub const V: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 55 };
    pub const W: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 56 };
    pub const X: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 57 };
    pub const Y: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 58 };
    pub const Z: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 59 };
    pub const F1: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 60 };
    pub const F2: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 61 };
    pub const F3: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 62 };
    pub const F4: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 63 };
    pub const F5: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 64 };
    pub const F6: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 65 };
    pub const F7: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 66 };
    pub const F8: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 67 };
    pub const F9: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 68 };
    pub const F10: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 69 };
    pub const F11: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 70 };
    pub const F12: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 71 };
    pub const Apostrophe: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 72 };
    pub const Comma: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 73 };
    pub const Minus: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 74 };
    pub const Period: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 75 };
    pub const Slash: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 76 };
    pub const Semicolon: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 77 };
    pub const Equal: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 78 };
    pub const LeftBracket: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 79 };
    pub const Backslash: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 80 };
    pub const RightBracket: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 81 };
    pub const GraveAccent: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 82 };
    pub const CapsLock: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 83 };
    pub const ScrollLock: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 84 };
    pub const NumLock: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 85 };
    pub const PrintScreen: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 86 };
    pub const Pause: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 87 };
    pub const Keypad0: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 88 };
    pub const Keypad1: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 89 };
    pub const Keypad2: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 90 };
    pub const Keypad3: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 91 };
    pub const Keypad4: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 92 };
    pub const Keypad5: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 93 };
    pub const Keypad6: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 94 };
    pub const Keypad7: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 95 };
    pub const Keypad8: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 96 };
    pub const Keypad9: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 97 };
    pub const KeypadDecimal: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 98 };
    pub const KeypadDivide: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 99 };
    pub const KeypadMultiply: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 100 };
    pub const KeypadSubtract: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 101 };
    pub const KeypadAdd: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 102 };
    pub const KeypadEnter: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 103 };
    pub const KeypadEqual: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 104 };
    pub const GamepadStart: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 105 };
    pub const GamepadBack: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 106 };
    pub const GamepadFaceLeft: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 107 };
    pub const GamepadFaceRight: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 108 };
    pub const GamepadFaceUp: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 109 };
    pub const GamepadFaceDown: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 110 };
    pub const GamepadDpadLeft: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 111 };
    pub const GamepadDpadRight: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 112 };
    pub const GamepadDpadUp: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 113 };
    pub const GamepadDpadDown: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 114 };
    pub const GamepadL1: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 115 };
    pub const GamepadR1: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 116 };
    pub const GamepadL2: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 117 };
    pub const GamepadR2: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 118 };
    pub const GamepadL3: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 119 };
    pub const GamepadR3: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 120 };
    pub const GamepadLStickLeft: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 121 };
    pub const GamepadLStickRight: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 122 };
    pub const GamepadLStickUp: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 123 };
    pub const GamepadLStickDown: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 124 };
    pub const GamepadRStickLeft: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 125 };
    pub const GamepadRStickRight: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 126 };
    pub const GamepadRStickUp: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 127 };
    pub const GamepadRStickDown: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 128 };
    pub const MouseLeft: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 129 };
    pub const MouseRight: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 130 };
    pub const MouseMiddle: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 131 };
    pub const MouseX1: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 132 };
    pub const MouseX2: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 133 };
    pub const MouseWheelX: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 134 };
    pub const MouseWheelY: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 135 };
    pub const ReservedForModCtrl: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 136 };
    pub const ReservedForModShift: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 137 };
    pub const ReservedForModAlt: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 138 };
    pub const ReservedForModSuper: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 139 };
    pub const COUNT: ImGuiKey = .{ .bits = ImGuiKey._Tab.bits + 140 };
    pub const ImGuiMod_None: ImGuiKey = .{ .bits = 0 };
    pub const ImGuiMod_Ctrl: ImGuiKey = .{ .bits = 1 << 12 };
    pub const ImGuiMod_Shift: ImGuiKey = .{ .bits = 1 << 13 };
    pub const ImGuiMod_Alt: ImGuiKey = .{ .bits = 1 << 14 };
    pub const ImGuiMod_Super: ImGuiKey = .{ .bits = 1 << 15 };
    pub const ImGuiMod_Shortcut: ImGuiKey = .{ .bits = 1 << 11 };
    pub const ImGuiMod_Mask_: ImGuiKey = .{ .bits = 63488 };
    pub const NamedKey_BEGIN: ImGuiKey = .{ .bits = 512 };
    pub const NamedKey_END: ImGuiKey = .{ .bits = ImGuiKey._COUNT.bits };
    pub const NamedKey_COUNT: ImGuiKey = .{ .bits = ImGuiKey._NamedKey_END.bits - ImGuiKey._NamedKey_BEGIN.bits };
    pub const KeysData_SIZE: ImGuiKey = .{ .bits = ImGuiKey._NamedKey_COUNT.bits };
    pub const KeysData_OFFSET: ImGuiKey = .{ .bits = ImGuiKey._NamedKey_BEGIN.bits };

    // pub usingnamespace cpp.FlagsMixin(ImGuiKey);
};

pub const ImGuiConfigFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const NavEnableKeyboard: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const NavEnableGamepad: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const NavEnableSetMousePos: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NavNoCaptureKeyboard: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoMouse: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoMouseCursorChange: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const DockingEnable: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const ViewportsEnable: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const DpiEnableScaleViewports: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 14) };
    pub const DpiEnableScaleFonts: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 15) };
    pub const IsSRGB: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 20) };
    pub const IsTouchScreen: ImGuiConfigFlags = .{ .bits = @intCast(c_uint, 1 << 21) };

    pub usingnamespace cpp.FlagsMixin(ImGuiConfigFlags);
};

pub const ImGuiBackendFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const HasGamepad: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const HasMouseCursors: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const HasSetMousePos: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const RendererHasVtxOffset: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const PlatformHasViewports: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const HasMouseHoveredViewport: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const RendererHasViewports: ImGuiBackendFlags = .{ .bits = @intCast(c_uint, 1 << 12) };

    pub usingnamespace cpp.FlagsMixin(ImGuiBackendFlags);
};

pub const ImGuiCol = extern struct {
    bits: c_int = 0,

    pub const Text: ImGuiCol = .{ .bits = 0 };
    pub const TextDisabled: ImGuiCol = .{ .bits = 1 };
    pub const WindowBg: ImGuiCol = .{ .bits = 2 };
    pub const ChildBg: ImGuiCol = .{ .bits = 3 };
    pub const PopupBg: ImGuiCol = .{ .bits = 4 };
    pub const Border: ImGuiCol = .{ .bits = 5 };
    pub const BorderShadow: ImGuiCol = .{ .bits = 6 };
    pub const FrameBg: ImGuiCol = .{ .bits = 7 };
    pub const FrameBgHovered: ImGuiCol = .{ .bits = 8 };
    pub const FrameBgActive: ImGuiCol = .{ .bits = 9 };
    pub const TitleBg: ImGuiCol = .{ .bits = 10 };
    pub const TitleBgActive: ImGuiCol = .{ .bits = 11 };
    pub const TitleBgCollapsed: ImGuiCol = .{ .bits = 12 };
    pub const MenuBarBg: ImGuiCol = .{ .bits = 13 };
    pub const ScrollbarBg: ImGuiCol = .{ .bits = 14 };
    pub const ScrollbarGrab: ImGuiCol = .{ .bits = 15 };
    pub const ScrollbarGrabHovered: ImGuiCol = .{ .bits = 16 };
    pub const ScrollbarGrabActive: ImGuiCol = .{ .bits = 17 };
    pub const CheckMark: ImGuiCol = .{ .bits = 18 };
    pub const SliderGrab: ImGuiCol = .{ .bits = 19 };
    pub const SliderGrabActive: ImGuiCol = .{ .bits = 20 };
    pub const Button: ImGuiCol = .{ .bits = 21 };
    pub const ButtonHovered: ImGuiCol = .{ .bits = 22 };
    pub const ButtonActive: ImGuiCol = .{ .bits = 23 };
    pub const Header: ImGuiCol = .{ .bits = 24 };
    pub const HeaderHovered: ImGuiCol = .{ .bits = 25 };
    pub const HeaderActive: ImGuiCol = .{ .bits = 26 };
    pub const Separator: ImGuiCol = .{ .bits = 27 };
    pub const SeparatorHovered: ImGuiCol = .{ .bits = 28 };
    pub const SeparatorActive: ImGuiCol = .{ .bits = 29 };
    pub const ResizeGrip: ImGuiCol = .{ .bits = 30 };
    pub const ResizeGripHovered: ImGuiCol = .{ .bits = 31 };
    pub const ResizeGripActive: ImGuiCol = .{ .bits = 32 };
    pub const Tab: ImGuiCol = .{ .bits = 33 };
    pub const TabHovered: ImGuiCol = .{ .bits = 34 };
    pub const TabActive: ImGuiCol = .{ .bits = 35 };
    pub const TabUnfocused: ImGuiCol = .{ .bits = 36 };
    pub const TabUnfocusedActive: ImGuiCol = .{ .bits = 37 };
    pub const DockingPreview: ImGuiCol = .{ .bits = 38 };
    pub const DockingEmptyBg: ImGuiCol = .{ .bits = 39 };
    pub const PlotLines: ImGuiCol = .{ .bits = 40 };
    pub const PlotLinesHovered: ImGuiCol = .{ .bits = 41 };
    pub const PlotHistogram: ImGuiCol = .{ .bits = 42 };
    pub const PlotHistogramHovered: ImGuiCol = .{ .bits = 43 };
    pub const TableHeaderBg: ImGuiCol = .{ .bits = 44 };
    pub const TableBorderStrong: ImGuiCol = .{ .bits = 45 };
    pub const TableBorderLight: ImGuiCol = .{ .bits = 46 };
    pub const TableRowBg: ImGuiCol = .{ .bits = 47 };
    pub const TableRowBgAlt: ImGuiCol = .{ .bits = 48 };
    pub const TextSelectedBg: ImGuiCol = .{ .bits = 49 };
    pub const DragDropTarget: ImGuiCol = .{ .bits = 50 };
    pub const NavHighlight: ImGuiCol = .{ .bits = 51 };
    pub const NavWindowingHighlight: ImGuiCol = .{ .bits = 52 };
    pub const NavWindowingDimBg: ImGuiCol = .{ .bits = 53 };
    pub const ModalWindowDimBg: ImGuiCol = .{ .bits = 54 };
    pub const COUNT: ImGuiCol = .{ .bits = 55 };

    // pub usingnamespace cpp.FlagsMixin(ImGuiCol_);
};

pub const ImGuiStyleVar = extern struct {
    bits: c_int = 0,

    pub const Alpha: ImGuiStyleVar = .{ .bits = 0 };
    pub const DisabledAlpha: ImGuiStyleVar = .{ .bits = 1 };
    pub const WindowPadding: ImGuiStyleVar = .{ .bits = 2 };
    pub const WindowRounding: ImGuiStyleVar = .{ .bits = 3 };
    pub const WindowBorderSize: ImGuiStyleVar = .{ .bits = 4 };
    pub const WindowMinSize: ImGuiStyleVar = .{ .bits = 5 };
    pub const WindowTitleAlign: ImGuiStyleVar = .{ .bits = 6 };
    pub const ChildRounding: ImGuiStyleVar = .{ .bits = 7 };
    pub const ChildBorderSize: ImGuiStyleVar = .{ .bits = 8 };
    pub const PopupRounding: ImGuiStyleVar = .{ .bits = 9 };
    pub const PopupBorderSize: ImGuiStyleVar = .{ .bits = 10 };
    pub const FramePadding: ImGuiStyleVar = .{ .bits = 11 };
    pub const FrameRounding: ImGuiStyleVar = .{ .bits = 12 };
    pub const FrameBorderSize: ImGuiStyleVar = .{ .bits = 13 };
    pub const ItemSpacing: ImGuiStyleVar = .{ .bits = 14 };
    pub const ItemInnerSpacing: ImGuiStyleVar = .{ .bits = 15 };
    pub const IndentSpacing: ImGuiStyleVar = .{ .bits = 16 };
    pub const CellPadding: ImGuiStyleVar = .{ .bits = 17 };
    pub const ScrollbarSize: ImGuiStyleVar = .{ .bits = 18 };
    pub const ScrollbarRounding: ImGuiStyleVar = .{ .bits = 19 };
    pub const GrabMinSize: ImGuiStyleVar = .{ .bits = 20 };
    pub const GrabRounding: ImGuiStyleVar = .{ .bits = 21 };
    pub const TabRounding: ImGuiStyleVar = .{ .bits = 22 };
    pub const ButtonTextAlign: ImGuiStyleVar = .{ .bits = 23 };
    pub const SelectableTextAlign: ImGuiStyleVar = .{ .bits = 24 };
    pub const SeparatorTextBorderSize: ImGuiStyleVar = .{ .bits = 25 };
    pub const SeparatorTextAlign: ImGuiStyleVar = .{ .bits = 26 };
    pub const SeparatorTextPadding: ImGuiStyleVar = .{ .bits = 27 };
    pub const COUNT: ImGuiStyleVar = .{ .bits = 28 };

    // pub usingnamespace cpp.FlagsMixin(ImGuiStyleVar_);
};

pub const ImGuiButtonFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiButtonFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const MouseButtonLeft: ImGuiButtonFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const MouseButtonRight: ImGuiButtonFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const MouseButtonMiddle: ImGuiButtonFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const MouseButtonMask_: ImGuiButtonFlags = .{ .bits = @intCast(c_uint, ImGuiButtonFlags.MouseButtonLeft.bits | ImGuiButtonFlags.MouseButtonRight.bits | ImGuiButtonFlags.MouseButtonMiddle.bits) };
    pub const MouseButtonDefault_: ImGuiButtonFlags = .{ .bits = @intCast(c_uint, ImGuiButtonFlags.MouseButtonLeft.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiButtonFlags);
};

pub const ImGuiColorEditFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const NoAlpha: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const NoPicker: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoOptions: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoSmallPreview: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoInputs: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const NoTooltip: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const NoLabel: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const NoSidePreview: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const NoDragDrop: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const NoBorder: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const AlphaBar: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 16) };
    pub const AlphaPreview: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 17) };
    pub const AlphaPreviewHalf: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 18) };
    pub const HDR: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 19) };
    pub const DisplayRGB: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 20) };
    pub const DisplayHSV: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 21) };
    pub const DisplayHex: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 22) };
    pub const Uint8: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 23) };
    pub const Float: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 24) };
    pub const PickerHueBar: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 25) };
    pub const PickerHueWheel: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 26) };
    pub const InputRGB: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 27) };
    pub const InputHSV: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, 1 << 28) };
    pub const DefaultOptions_: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, ImGuiColorEditFlags.Uint8.bits | ImGuiColorEditFlags.DisplayRGB.bits | ImGuiColorEditFlags.InputRGB.bits | ImGuiColorEditFlags.PickerHueBar.bits) };
    pub const DisplayMask_: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, ImGuiColorEditFlags.DisplayRGB.bits | ImGuiColorEditFlags.DisplayHSV.bits | ImGuiColorEditFlags.DisplayHex.bits) };
    pub const DataTypeMask_: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, ImGuiColorEditFlags.Uint8.bits | ImGuiColorEditFlags.Float.bits) };
    pub const PickerMask_: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, ImGuiColorEditFlags.PickerHueWheel.bits | ImGuiColorEditFlags.PickerHueBar.bits) };
    pub const InputMask_: ImGuiColorEditFlags = .{ .bits = @intCast(c_uint, ImGuiColorEditFlags.InputRGB.bits | ImGuiColorEditFlags.InputHSV.bits) };

    pub usingnamespace cpp.FlagsMixin(ImGuiColorEditFlags);
};

pub const ImGuiSliderFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiSliderFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const AlwaysClamp: ImGuiSliderFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const Logarithmic: ImGuiSliderFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const NoRoundToFormat: ImGuiSliderFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const NoInput: ImGuiSliderFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const InvalidMask_: ImGuiSliderFlags = .{ .bits = @intCast(c_uint, 1879048207) };

    pub usingnamespace cpp.FlagsMixin(ImGuiSliderFlags);
};

pub const ImGuiMouseButton = extern struct {
    bits: c_int = 0,

    pub const Left: ImGuiMouseButton = .{ .bits = @intCast(c_uint, 0) };
    pub const Right: ImGuiMouseButton = .{ .bits = @intCast(c_uint, 1) };
    pub const Middle: ImGuiMouseButton = .{ .bits = @intCast(c_uint, 2) };
    pub const COUNT: ImGuiMouseButton = .{ .bits = @intCast(c_uint, 5) };

    // pub usingnamespace cpp.FlagsMixin(ImGuiMouseButton_);
};

pub const ImGuiMouseCursor = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiMouseCursor = .{ .bits = -1 };
    pub const Arrow: ImGuiMouseCursor = .{ .bits = 0 };
    pub const TextInput: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 1 };
    pub const ResizeAll: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 2 };
    pub const ResizeNS: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 3 };
    pub const ResizeEW: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 4 };
    pub const ResizeNESW: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 5 };
    pub const ResizeNWSE: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 6 };
    pub const Hand: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 7 };
    pub const NotAllowed: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 8 };
    pub const COUNT: ImGuiMouseCursor = .{ .bits = ImGuiMouseCursor.Arrow.bits + 9 };

    // pub usingnamespace cpp.FlagsMixin(ImGuiMouseCursor_);
};

pub const ImGuiMouseSource = extern struct {
    bits: c_int = 0,

    pub const _Mouse: ImGuiMouseSource = .{ .bits = 0 };
    pub const _TouchScreen: ImGuiMouseSource = .{ .bits = ImGuiMouseSource._Mouse.bits + 1 };
    pub const _Pen: ImGuiMouseSource = .{ .bits = ImGuiMouseSource._Mouse.bits + 2 };
    pub const _COUNT: ImGuiMouseSource = .{ .bits = ImGuiMouseSource._Mouse.bits + 3 };

    // pub usingnamespace cpp.FlagsMixin(ImGuiMouseSource);
};

pub const ImGuiCond = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiCond = .{ .bits = @intCast(c_uint, 0) };
    pub const Always: ImGuiCond = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const Once: ImGuiCond = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const FirstUseEver: ImGuiCond = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const Appearing: ImGuiCond = .{ .bits = @intCast(c_uint, 1 << 3) };

    // pub usingnamespace cpp.FlagsMixin(ImGuiCond_);
};

pub fn IM_DELETE(comptime T: type, p: [*c]T) void {
    if (p) {
        p.deinit();
        MemFree(p);
    }
}

pub fn ImVector(comptime T: type) type {
    return extern struct {
        const Self = @This();

        Size: c_int,
        Capacity: c_int,
        Data: [*c]T,

        pub const value_type = T;

        pub const iterator = [*c]value_type;

        pub const const_iterator = [*c]const value_type;

        pub inline fn copyFrom(self: *Self, src: *const ImVector(T)) *ImVector(T) {
            self.clear();
            self.resize(src.Size);
            if (src.Data) memcpy(self.Data, src.Data, @as(usize, self.Size) * @sizeOf(T));
            return self.*;
        }
        pub inline fn clear(self: *Self) void {
            if (self.Data) {
                self.Capacity = 0;
                self.Size = 0;
                MemFree(self.Data);
                self.Data = 0;
            }
        }
        pub inline fn clear_delete(self: *Self) void {
            var n: c_int = 0;
            while (n < self.Size) : (n += 1) IM_DELETE(self.Data[n]);
            self.clear();
        }
        pub inline fn clear_destruct(self: *Self) void {
            var n: c_int = 0;
            while (n < self.Size) : (n += 1) self.Data[n].deinit();
            self.clear();
        }
        pub inline fn empty(self: *const Self) bool {
            return self.Size == 0;
        }
        pub inline fn size(self: *const Self) c_int {
            return self.Size;
        }
        pub inline fn size_in_bytes(self: *const Self) c_int {
            return self.Size * @as(c_int, @sizeOf(T));
        }
        pub inline fn max_size(_: *const Self) c_int {
            return 2147483647 / @as(c_int, @sizeOf(T));
        }
        pub inline fn capacity(self: *const Self) c_int {
            return self.Capacity;
        }
        pub inline fn getPtr(self: *Self, i: c_int) *T {
            ImAssert(i >= 0 and i < self.Size);
            return self.Data[i];
        }
        pub inline fn get(self: *const Self, i: c_int) *const T {
            ImAssert(i >= 0 and i < self.Size);
            return self.Data[i];
        }
        pub inline fn begin(self: *Self) [*c]T {
            return self.Data;
        }
        pub inline fn begin__Overload2(self: *const Self) [*c]const T {
            return self.Data;
        }
        pub inline fn end(self: *Self) [*c]T {
            return self.Data + self.Size;
        }
        pub inline fn end__Overload2(self: *const Self) [*c]const T {
            return self.Data + self.Size;
        }
        pub inline fn front(self: *Self) *T {
            ImAssert(self.Size > 0);
            return self.Data[0];
        }
        pub inline fn front__Overload2(self: *const Self) *const T {
            ImAssert(self.Size > 0);
            return self.Data[0];
        }
        pub inline fn back(self: *Self) *T {
            ImAssert(self.Size > 0);
            return self.Data[self.Size - 1];
        }
        pub inline fn back__Overload2(self: *const Self) *const T {
            ImAssert(self.Size > 0);
            return self.Data[self.Size - 1];
        }
        pub inline fn swap(self: *Self, rhs: *ImVector(T)) void {
            var rhs_size: c_int = rhs.Size;
            rhs.Size = self.Size;
            self.Size = rhs_size;
            var rhs_cap: c_int = rhs.Capacity;
            rhs.Capacity = self.Capacity;
            self.Capacity = rhs_cap;
            var rhs_data: [*c]T = rhs.Data;
            rhs.Data = self.Data;
            self.Data = rhs_data;
        }
        inline fn _grow_capacity(self: *const Self, sz: c_int) c_int {
            var new_capacity: c_int = if (((self.Capacity) != 0)) (self.Capacity + self.Capacity / 2) else 8;
            return if (new_capacity > sz) new_capacity else sz;
        }
        pub inline fn resize(self: *Self, new_size: c_int) void {
            if (new_size > self.Capacity) self.reserve(self._grow_capacity(new_size));
            self.Size = new_size;
        }
        pub inline fn resizeWith(self: *Self, new_size: c_int, v: *const T) void {
            if (new_size > self.Capacity) self.reserve(self._grow_capacity(new_size));
            if (new_size > self.Size) {
                var n: c_int = self.Size;
                while (n < new_size) : (n += 1) memcpy(&self.Data[n], &v, @sizeOf(v));
            }
            self.Size = new_size;
        }
        pub inline fn shrink(self: *Self, new_size: c_int) void {
            ImAssert(new_size <= self.Size);
            self.Size = new_size;
        }
        pub inline fn reserve(self: *Self, new_capacity: c_int) void {
            if (new_capacity <= self.Capacity) return;
            var new_data: [*c]T = @as([*c]T, MemAlloc(@intCast(usize, new_capacity) * @sizeOf(T)));
            if (self.Data) {
                memcpy(new_data, self.Data, @as(usize, self.Size) * @sizeOf(T));
                MemFree(self.Data);
            }
            self.Data = new_data;
            self.Capacity = new_capacity;
        }
        pub inline fn reserve_discard(self: *Self, new_capacity: c_int) void {
            if (new_capacity <= self.Capacity) return;
            if (self.Data) MemFree(self.Data);
            self.Data = @as([*c]T, MemAlloc(@intCast(usize, new_capacity) * @sizeOf(T)));
            self.Capacity = new_capacity;
        }
        pub inline fn push_back(self: *Self, v: *const T) void {
            if (self.Size == self.Capacity) self.reserve(self._grow_capacity(self.Size + 1));
            memcpy(&self.Data[self.Size], &v, @sizeOf(v));
            self.Size += 1;
        }
        pub inline fn pop_back(self: *Self) void {
            ImAssert(self.Size > 0);
            self.Size -= 1;
        }
        pub inline fn push_front(self: *Self, v: *const T) void {
            if (self.Size == 0) self.push_back(v) else self.insert(self.Data, v);
        }
        pub inline fn erase(self: *Self, it: [*c]const T) [*c]T {
            ImAssert(it >= self.Data and it < self.Data + self.Size);
            const off: isize = it - self.Data;
            memmove(self.Data + off, self.Data + off + 1, (@as(usize, self.Size) - @as(usize, off) - @intCast(usize, 1)) * @sizeOf(T));
            self.Size -= 1;
            return self.Data + off;
        }
        pub inline fn erase__Overload2(self: *Self, it: [*c]const T, it_last: [*c]const T) [*c]T {
            ImAssert(it >= self.Data and it < self.Data + self.Size and it_last >= it and it_last <= self.Data + self.Size);
            const count: isize = it_last - it;
            const off: isize = it - self.Data;
            memmove(self.Data + off, self.Data + off + count, (@as(usize, self.Size) - @as(usize, off) - @as(usize, count)) * @sizeOf(T));
            self.Size -= @as(c_int, count);
            return self.Data + off;
        }
        pub inline fn erase_unsorted(self: *Self, it: [*c]const T) [*c]T {
            ImAssert(it >= self.Data and it < self.Data + self.Size);
            const off: isize = it - self.Data;
            if (it < self.Data + self.Size - 1) memcpy(self.Data + off, self.Data + self.Size - 1, @sizeOf(T));
            self.Size -= 1;
            return self.Data + off;
        }
        pub inline fn insert(self: *Self, it: [*c]const T, v: *const T) [*c]T {
            ImAssert(it >= self.Data and it <= self.Data + self.Size);
            const off: isize = it - self.Data;
            if (self.Size == self.Capacity) self.reserve(self._grow_capacity(self.Size + 1));
            if (off < @intCast(isize, @as(c_int, self.Size))) memmove(self.Data + off + 1, self.Data + off, (@as(usize, self.Size) - @as(usize, off)) * @sizeOf(T));
            memcpy(&self.Data[off], &v, @sizeOf(v));
            self.Size += 1;
            return self.Data + off;
        }
        pub inline fn contains(self: *const Self, v: *const T) bool {
            const data: [*c]T = self.Data;
            const data_end: [*c]T = self.Data + self.Size;
            while (data < data_end) : (data += 1) {
                if (data.* == v) return true;
            }
            return false;
        }
        pub inline fn find(self: *Self, v: *const T) [*c]T {
            var data: [*c]T = self.Data;
            const data_end: [*c]T = self.Data + self.Size;
            while (data < data_end) {
                if (data.* == v) break else data += 1;
            }
            return data;
        }
        pub inline fn find__Overload2(self: *const Self, v: *const T) [*c]const T {
            const data: [*c]T = self.Data;
            const data_end: [*c]T = self.Data + self.Size;
            while (data < data_end) {
                if (data.* == v) break else data += 1;
            }
            return data;
        }
        pub inline fn find_erase(self: *Self, v: *const T) bool {
            const it: [*c]T = self.find(v);
            if (it < self.Data + self.Size) {
                self.erase(it);
                return true;
            }
            return false;
        }
        pub inline fn find_erase_unsorted(self: *Self, v: *const T) bool {
            const it: [*c]T = self.find(v);
            if (it < self.Data + self.Size) {
                self.erase_unsorted(it);
                return true;
            }
            return false;
        }
        pub inline fn index_from_ptr(self: *const Self, it: [*c]const T) c_int {
            ImAssert(it >= self.Data and it < self.Data + self.Size);
            const off: isize = it - self.Data;
            return @as(c_int, off);
        }
    };
}

pub const ImGuiStyle = extern struct {
    Alpha: f32,
    DisabledAlpha: f32,
    WindowPadding: ImVec2,
    WindowRounding: f32,
    WindowBorderSize: f32,
    WindowMinSize: ImVec2,
    WindowTitleAlign: ImVec2,
    WindowMenuButtonPosition: ImGuiDir,
    ChildRounding: f32,
    ChildBorderSize: f32,
    PopupRounding: f32,
    PopupBorderSize: f32,
    FramePadding: ImVec2,
    FrameRounding: f32,
    FrameBorderSize: f32,
    ItemSpacing: ImVec2,
    ItemInnerSpacing: ImVec2,
    CellPadding: ImVec2,
    TouchExtraPadding: ImVec2,
    IndentSpacing: f32,
    ColumnsMinSpacing: f32,
    ScrollbarSize: f32,
    ScrollbarRounding: f32,
    GrabMinSize: f32,
    GrabRounding: f32,
    LogSliderDeadzone: f32,
    TabRounding: f32,
    TabBorderSize: f32,
    TabMinWidthForCloseButton: f32,
    ColorButtonPosition: ImGuiDir,
    ButtonTextAlign: ImVec2,
    SelectableTextAlign: ImVec2,
    SeparatorTextBorderSize: f32,
    SeparatorTextAlign: ImVec2,
    SeparatorTextPadding: ImVec2,
    DisplayWindowPadding: ImVec2,
    DisplaySafeAreaPadding: ImVec2,
    MouseCursorScale: f32,
    AntiAliasedLines: bool,
    AntiAliasedLinesUseTex: bool,
    AntiAliasedFill: bool,
    CurveTessellationTol: f32,
    CircleTessellationMaxError: f32,
    Colors: [55]ImVec4,

    extern fn _1_ImGuiStyle_init_() ImGuiStyle;
    pub const init = _1_ImGuiStyle_init_;

    extern fn _1_ImGuiStyle_ScaleAllSizes_(self: *ImGuiStyle, scale_factor: f32) void;
    pub const ScaleAllSizes = _1_ImGuiStyle_ScaleAllSizes_;
};

pub const ImGuiKeyData = extern struct {
    Down: bool,
    DownDuration: f32,
    DownDurationPrev: f32,
    AnalogValue: f32,
};

pub const ImGuiIO = extern struct {
    ConfigFlags: ImGuiConfigFlags,
    BackendFlags: ImGuiBackendFlags,
    DisplaySize: ImVec2,
    DeltaTime: f32,
    IniSavingRate: f32,
    IniFilename: [*c]const u8,
    LogFilename: [*c]const u8,
    MouseDoubleClickTime: f32,
    MouseDoubleClickMaxDist: f32,
    MouseDragThreshold: f32,
    KeyRepeatDelay: f32,
    KeyRepeatRate: f32,
    HoverDelayNormal: f32,
    HoverDelayShort: f32,
    UserData: ?*anyopaque,
    Fonts: [*c]ImFontAtlas,
    FontGlobalScale: f32,
    FontAllowUserScaling: bool,
    FontDefault: [*c]ImFont,
    DisplayFramebufferScale: ImVec2,
    ConfigDockingNoSplit: bool,
    ConfigDockingWithShift: bool,
    ConfigDockingAlwaysTabBar: bool,
    ConfigDockingTransparentPayload: bool,
    ConfigViewportsNoAutoMerge: bool,
    ConfigViewportsNoTaskBarIcon: bool,
    ConfigViewportsNoDecoration: bool,
    ConfigViewportsNoDefaultParent: bool,
    MouseDrawCursor: bool,
    ConfigMacOSXBehaviors: bool,
    ConfigInputTrickleEventQueue: bool,
    ConfigInputTextCursorBlink: bool,
    ConfigInputTextEnterKeepActive: bool,
    ConfigDragClickToInputText: bool,
    ConfigWindowsResizeFromEdges: bool,
    ConfigWindowsMoveFromTitleBarOnly: bool,
    ConfigMemoryCompactTimer: f32,
    ConfigDebugBeginReturnValueOnce: bool,
    ConfigDebugBeginReturnValueLoop: bool,
    BackendPlatformName: [*c]const u8,
    BackendRendererName: [*c]const u8,
    BackendPlatformUserData: ?*anyopaque,
    BackendRendererUserData: ?*anyopaque,
    BackendLanguageUserData: ?*anyopaque,
    GetClipboardTextFn: ?*const fn (?*anyopaque) callconv(.C) [*c]const u8,
    SetClipboardTextFn: ?*const fn (?*anyopaque, [*c]const u8) callconv(.C) void,
    ClipboardUserData: ?*anyopaque,
    SetPlatformImeDataFn: ?*const fn ([*c]ImGuiViewport, [*c]ImGuiPlatformImeData) callconv(.C) void,
    _UnusedPadding: ?*anyopaque,
    WantCaptureMouse: bool,
    WantCaptureKeyboard: bool,
    WantTextInput: bool,
    WantSetMousePos: bool,
    WantSaveIniSettings: bool,
    NavActive: bool,
    NavVisible: bool,
    Framerate: f32,
    MetricsRenderVertices: c_int,
    MetricsRenderIndices: c_int,
    MetricsRenderWindows: c_int,
    MetricsActiveWindows: c_int,
    MetricsActiveAllocations: c_int,
    MouseDelta: ImVec2,
    Ctx: [*c]ImGuiContext,
    MousePos: ImVec2,
    MouseDown: [5]bool,
    MouseWheel: f32,
    MouseWheelH: f32,
    MouseSource: ImGuiMouseSource,
    MouseHoveredViewport: ImGuiID,
    KeyCtrl: bool,
    KeyShift: bool,
    KeyAlt: bool,
    KeySuper: bool,
    KeyMods: ImGuiKeyChord,
    KeysData: [140]ImGuiKeyData,
    WantCaptureMouseUnlessPopupClose: bool,
    MousePosPrev: ImVec2,
    MouseClickedPos: [5]ImVec2,
    MouseClickedTime: [5]f64,
    MouseClicked: [5]bool,
    MouseDoubleClicked: [5]bool,
    MouseClickedCount: [5]ImU16,
    MouseClickedLastCount: [5]ImU16,
    MouseReleased: [5]bool,
    MouseDownOwned: [5]bool,
    MouseDownOwnedUnlessPopupClose: [5]bool,
    MouseWheelRequestAxisSwap: bool,
    MouseDownDuration: [5]f32,
    MouseDownDurationPrev: [5]f32,
    MouseDragMaxDistanceAbs: [5]ImVec2,
    MouseDragMaxDistanceSqr: [5]f32,
    PenPressure: f32,
    AppFocusLost: bool,
    AppAcceptingEvents: bool,
    BackendUsingLegacyKeyArrays: ImS8,
    BackendUsingLegacyNavInputArray: bool,
    InputQueueSurrogate: ImWchar16,
    InputQueueCharacters: ImVector(ImWchar),

    extern fn _1_ImGuiIO_AddKeyEvent_(self: *ImGuiIO, key: ImGuiKey, down: bool) void;
    pub const AddKeyEvent = _1_ImGuiIO_AddKeyEvent_;

    extern fn _1_ImGuiIO_AddKeyAnalogEvent_(self: *ImGuiIO, key: ImGuiKey, down: bool, v: f32) void;
    pub const AddKeyAnalogEvent = _1_ImGuiIO_AddKeyAnalogEvent_;

    extern fn _1_ImGuiIO_AddMousePosEvent_(self: *ImGuiIO, x: f32, y: f32) void;
    pub const AddMousePosEvent = _1_ImGuiIO_AddMousePosEvent_;

    extern fn _1_ImGuiIO_AddMouseButtonEvent_(self: *ImGuiIO, button: c_int, down: bool) void;
    pub const AddMouseButtonEvent = _1_ImGuiIO_AddMouseButtonEvent_;

    extern fn _1_ImGuiIO_AddMouseWheelEvent_(self: *ImGuiIO, wheel_x: f32, wheel_y: f32) void;
    pub const AddMouseWheelEvent = _1_ImGuiIO_AddMouseWheelEvent_;

    extern fn _1_ImGuiIO_AddMouseSourceEvent_(self: *ImGuiIO, source: ImGuiMouseSource) void;
    pub const AddMouseSourceEvent = _1_ImGuiIO_AddMouseSourceEvent_;

    extern fn _1_ImGuiIO_AddMouseViewportEvent_(self: *ImGuiIO, id: ImGuiID) void;
    pub const AddMouseViewportEvent = _1_ImGuiIO_AddMouseViewportEvent_;

    extern fn _1_ImGuiIO_AddFocusEvent_(self: *ImGuiIO, focused: bool) void;
    pub const AddFocusEvent = _1_ImGuiIO_AddFocusEvent_;

    extern fn _1_ImGuiIO_AddInputCharacter_(self: *ImGuiIO, c: c_uint) void;
    pub const AddInputCharacter = _1_ImGuiIO_AddInputCharacter_;

    extern fn _1_ImGuiIO_AddInputCharacterUTF16_(self: *ImGuiIO, c: ImWchar16) void;
    pub const AddInputCharacterUTF16 = _1_ImGuiIO_AddInputCharacterUTF16_;

    extern fn _1_ImGuiIO_AddInputCharactersUTF8_(self: *ImGuiIO, str: [*c]const u8) void;
    pub const AddInputCharactersUTF8 = _1_ImGuiIO_AddInputCharactersUTF8_;

    extern fn _1_ImGuiIO_SetKeyEventNativeData_(self: *ImGuiIO, key: ImGuiKey, native_keycode: c_int, native_scancode: c_int, native_legacy_index: c_int) void;
    pub const SetKeyEventNativeData = _1_ImGuiIO_SetKeyEventNativeData_;

    extern fn _1_ImGuiIO_SetAppAcceptingEvents_(self: *ImGuiIO, accepting_events: bool) void;
    pub const SetAppAcceptingEvents = _1_ImGuiIO_SetAppAcceptingEvents_;

    extern fn _1_ImGuiIO_ClearInputCharacters_(self: *ImGuiIO) void;
    pub const ClearInputCharacters = _1_ImGuiIO_ClearInputCharacters_;

    extern fn _1_ImGuiIO_ClearInputKeys_(self: *ImGuiIO) void;
    pub const ClearInputKeys = _1_ImGuiIO_ClearInputKeys_;

    extern fn _1_ImGuiIO_init_() ImGuiIO;
    pub const init = _1_ImGuiIO_init_;
};

pub const ImGuiInputTextCallbackData = extern struct {
    Ctx: [*c]ImGuiContext,
    EventFlag: ImGuiInputTextFlags,
    Flags: ImGuiInputTextFlags,
    UserData: ?*anyopaque,
    EventChar: ImWchar,
    EventKey: ImGuiKey,
    Buf: [*c]u8,
    BufTextLen: c_int,
    BufSize: c_int,
    BufDirty: bool,
    CursorPos: c_int,
    SelectionStart: c_int,
    SelectionEnd: c_int,

    extern fn _1_ImGuiInputTextCallbackData_init_() ImGuiInputTextCallbackData;
    pub const init = _1_ImGuiInputTextCallbackData_init_;

    extern fn _1_ImGuiInputTextCallbackData_DeleteChars_(self: *ImGuiInputTextCallbackData, pos: c_int, bytes_count: c_int) void;
    pub const DeleteChars = _1_ImGuiInputTextCallbackData_DeleteChars_;

    extern fn _1_ImGuiInputTextCallbackData_InsertChars_(self: *ImGuiInputTextCallbackData, pos: c_int, text: [*c]const u8, text_end: [*c]const u8) void;
    pub const InsertChars = _1_ImGuiInputTextCallbackData_InsertChars_;

    pub fn SelectAll(self: *ImGuiInputTextCallbackData) void {
        self.SelectionStart = 0;
        self.SelectionEnd = self.BufTextLen;
    }
    pub fn ClearSelection(self: *ImGuiInputTextCallbackData) void {
        self.SelectionEnd = self.BufTextLen;
        self.SelectionStart = self.SelectionEnd;
    }
    pub fn HasSelection(self: *const ImGuiInputTextCallbackData) bool {
        return self.SelectionStart != self.SelectionEnd;
    }
};

pub const ImGuiSizeCallbackData = extern struct {
    UserData: ?*anyopaque,
    Pos: ImVec2,
    CurrentSize: ImVec2,
    DesiredSize: ImVec2,
};

pub const ImGuiWindowClass = extern struct {
    ClassId: ImGuiID,
    ParentViewportId: ImGuiID,
    ViewportFlagsOverrideSet: ImGuiViewportFlags,
    ViewportFlagsOverrideClear: ImGuiViewportFlags,
    TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    DockingAlwaysTabBar: bool,
    DockingAllowUnclassed: bool,

    extern fn _1_ImGuiWindowClass_init_() ImGuiWindowClass;
    pub const init = _1_ImGuiWindowClass_init_;
};

pub const ImGuiPayload = extern struct {
    Data: ?*anyopaque,
    DataSize: c_int,
    SourceId: ImGuiID,
    SourceParentId: ImGuiID,
    DataFrameCount: c_int,
    DataType: [33]u8,
    Preview: bool,
    Delivery: bool,

    extern fn _1_ImGuiPayload_init_() ImGuiPayload;
    pub const init = _1_ImGuiPayload_init_;

    pub fn Clear(self: *ImGuiPayload) void {
        self.SourceParentId = @intCast(ImGuiID, 0);
        self.SourceId = self.SourceParentId;
        self.Data = null;
        self.DataSize = 0;
        memset(@bitCast(?*anyopaque, @as([*c]u8, self.DataType)), 0, @sizeOf(self.DataType));
        self.DataFrameCount = -1;
        self.Delivery = false;
        self.Preview = false;
    }
    pub fn IsDataType(self: *const ImGuiPayload, ty: [*c]const u8) bool {
        return self.DataFrameCount != -1 and strcmp(ty, @as([*c]const u8, self.DataType)) == 0;
    }
    pub fn IsPreview(self: *const ImGuiPayload) bool {
        return self.Preview;
    }
    pub fn IsDelivery(self: *const ImGuiPayload) bool {
        return self.Delivery;
    }
};

pub const ImGuiTableColumnSortSpecs = extern struct {
    ColumnUserID: ImGuiID,
    ColumnIndex: ImS16,
    SortOrder: ImS16,
    SortDirection: ImGuiSortDirection,

    extern fn _1_ImGuiTableColumnSortSpecs_init_() ImGuiTableColumnSortSpecs;
    pub const init = _1_ImGuiTableColumnSortSpecs_init_;
};

pub const ImGuiTableSortSpecs = extern struct {
    Specs: [*c]const ImGuiTableColumnSortSpecs,
    SpecsCount: c_int,
    SpecsDirty: bool,

    extern fn _1_ImGuiTableSortSpecs_init_() ImGuiTableSortSpecs;
    pub const init = _1_ImGuiTableSortSpecs_init_;
};

pub const ImGuiOnceUponAFrame = extern struct {
    RefFrame: c_int,

    extern fn _1_ImGuiOnceUponAFrame_init_() ImGuiOnceUponAFrame;
    pub const init = _1_ImGuiOnceUponAFrame_init_;
};

pub const ImGuiTextFilter = extern struct {
    pub const ImGuiTextRange = extern struct {
        b: [*c]const u8,
        e: [*c]const u8,

        extern fn _1_ImGuiTextFilter_ImGuiTextRange_init_() ImGuiTextRange;
        pub const init = _1_ImGuiTextFilter_ImGuiTextRange_init_;

        extern fn _2_ImGuiTextFilter_ImGuiTextRange_init_(_b: [*c]const u8, _e: [*c]const u8) ImGuiTextRange;
        pub const init2 = _2_ImGuiTextFilter_ImGuiTextRange_init_;

        pub fn empty(self: *const ImGuiTextRange) bool {
            return self.b == self.e;
        }
        extern fn _1_ImGuiTextFilter_ImGuiTextRange_split_(self: *const ImGuiTextRange, separator: u8, out: [*c]ImVector(ImGuiTextRange)) void;
        pub const split = _1_ImGuiTextFilter_ImGuiTextRange_split_;
    };

    InputBuf: [256]u8,
    Filters: ImVector(ImGuiTextRange),
    CountGrep: c_int,

    extern fn _1_ImGuiTextFilter_init_(default_filter: [*c]const u8) ImGuiTextFilter;
    pub const init = _1_ImGuiTextFilter_init_;

    extern fn _1_ImGuiTextFilter_Draw_(self: *ImGuiTextFilter, label: [*c]const u8, width: f32) bool;
    pub const Draw = _1_ImGuiTextFilter_Draw_;

    extern fn _1_ImGuiTextFilter_PassFilter_(self: *const ImGuiTextFilter, text: [*c]const u8, text_end: [*c]const u8) bool;
    pub const PassFilter = _1_ImGuiTextFilter_PassFilter_;

    extern fn _1_ImGuiTextFilter_Build_(self: *ImGuiTextFilter) void;
    pub const Build = _1_ImGuiTextFilter_Build_;

    pub fn Clear(self: *ImGuiTextFilter) void {
        @as([*c]u8, self.InputBuf)[0] = @intCast(u8, 0);
        self.Build();
    }
    pub fn IsActive(self: *const ImGuiTextFilter) bool {
        return !self.empty();
    }
};

pub const ImGuiTextBuffer = extern struct {
    Buf: ImVector(u8),

    extern fn _1_ImGuiTextBuffer_EmptyString_() *u8;
    pub inline fn EmptyString() *u8 {
        return _1_ImGuiTextBuffer_EmptyString_();
    }

    extern fn _1_ImGuiTextBuffer_init_() ImGuiTextBuffer;
    pub const init = _1_ImGuiTextBuffer_init_;

    pub inline fn get(self: *const ImGuiTextBuffer, i: c_int) u8 {
        ImAssert(self.Buf.Data != null);
        return self.Buf.Data[i];
    }
    pub fn begin(self: *const ImGuiTextBuffer) [*c]const u8 {
        return if (@as(bool, self.Buf.Data)) &self.front() else @as([*c]u8, EmptyString);
    }
    pub fn end(self: *const ImGuiTextBuffer) [*c]const u8 {
        return if (@as(bool, self.Buf.Data)) &self.back() else @as([*c]u8, EmptyString);
    }
    pub fn size(self: *const ImGuiTextBuffer) c_int {
        return if (((self.Buf.Size) != 0)) self.Buf.Size - 1 else 0;
    }
    pub fn empty(self: *const ImGuiTextBuffer) bool {
        return self.Buf.Size <= 1;
    }
    pub fn clear(self: *ImGuiTextBuffer) void {
        self.clear();
    }
    pub fn reserve(self: *ImGuiTextBuffer, capacity: c_int) void {
        self.reserve(capacity);
    }
    pub fn c_str(self: *const ImGuiTextBuffer) [*c]const u8 {
        return if (@as(bool, self.Buf.Data)) self.Buf.Data else @as([*c]u8, EmptyString);
    }
    extern fn _1_ImGuiTextBuffer_append_(self: *ImGuiTextBuffer, str: [*c]const u8, str_end: [*c]const u8) void;
    pub const append = _1_ImGuiTextBuffer_append_;

    extern fn _1_ImGuiTextBuffer_appendfv_(self: *ImGuiTextBuffer, fmt: [*c]const u8, args: [*c]u8) void;
    pub const appendfv = _1_ImGuiTextBuffer_appendfv_;
};

pub const ImGuiStorage = extern struct {
    pub const ImGuiStoragePair = extern struct {
        key: ImGuiID,
        __field0: extern union {
            val_i: c_int,
            val_f: f32,
            val_p: ?*anyopaque,
        },

        extern fn _1_ImGuiStorage_ImGuiStoragePair_init_(_key: ImGuiID, _val_i: c_int) ImGuiStoragePair;
        pub const init = _1_ImGuiStorage_ImGuiStoragePair_init_;

        extern fn _2_ImGuiStorage_ImGuiStoragePair_init_(_key: ImGuiID, _val_f: f32) ImGuiStoragePair;
        pub const init2 = _2_ImGuiStorage_ImGuiStoragePair_init_;

        extern fn _3_ImGuiStorage_ImGuiStoragePair_init_(_key: ImGuiID, _val_p: ?*anyopaque) ImGuiStoragePair;
        pub const init3 = _3_ImGuiStorage_ImGuiStoragePair_init_;
    };

    Data: ImVector(ImGuiStoragePair),

    pub fn Clear(self: *ImGuiStorage) void {
        self.clear();
    }
    extern fn _1_ImGuiStorage_GetInt_(self: *const ImGuiStorage, key: ImGuiID, default_val: c_int) c_int;
    pub const GetInt = _1_ImGuiStorage_GetInt_;

    extern fn _1_ImGuiStorage_SetInt_(self: *ImGuiStorage, key: ImGuiID, val: c_int) void;
    pub const SetInt = _1_ImGuiStorage_SetInt_;

    extern fn _1_ImGuiStorage_GetBool_(self: *const ImGuiStorage, key: ImGuiID, default_val: bool) bool;
    pub const GetBool = _1_ImGuiStorage_GetBool_;

    extern fn _1_ImGuiStorage_SetBool_(self: *ImGuiStorage, key: ImGuiID, val: bool) void;
    pub const SetBool = _1_ImGuiStorage_SetBool_;

    extern fn _1_ImGuiStorage_GetFloat_(self: *const ImGuiStorage, key: ImGuiID, default_val: f32) f32;
    pub const GetFloat = _1_ImGuiStorage_GetFloat_;

    extern fn _1_ImGuiStorage_SetFloat_(self: *ImGuiStorage, key: ImGuiID, val: f32) void;
    pub const SetFloat = _1_ImGuiStorage_SetFloat_;

    extern fn _1_ImGuiStorage_GetVoidPtr_(self: *const ImGuiStorage, key: ImGuiID) ?*anyopaque;
    pub const GetVoidPtr = _1_ImGuiStorage_GetVoidPtr_;

    extern fn _1_ImGuiStorage_SetVoidPtr_(self: *ImGuiStorage, key: ImGuiID, val: ?*anyopaque) void;
    pub const SetVoidPtr = _1_ImGuiStorage_SetVoidPtr_;

    extern fn _1_ImGuiStorage_GetIntRef_(self: *ImGuiStorage, key: ImGuiID, default_val: c_int) [*c]c_int;
    pub const GetIntRef = _1_ImGuiStorage_GetIntRef_;

    extern fn _1_ImGuiStorage_GetBoolRef_(self: *ImGuiStorage, key: ImGuiID, default_val: bool) [*c]bool;
    pub const GetBoolRef = _1_ImGuiStorage_GetBoolRef_;

    extern fn _1_ImGuiStorage_GetFloatRef_(self: *ImGuiStorage, key: ImGuiID, default_val: f32) [*c]f32;
    pub const GetFloatRef = _1_ImGuiStorage_GetFloatRef_;

    extern fn _1_ImGuiStorage_GetVoidPtrRef_(self: *ImGuiStorage, key: ImGuiID, default_val: ?*anyopaque) [*c]?*anyopaque;
    pub const GetVoidPtrRef = _1_ImGuiStorage_GetVoidPtrRef_;

    extern fn _1_ImGuiStorage_SetAllInt_(self: *ImGuiStorage, val: c_int) void;
    pub const SetAllInt = _1_ImGuiStorage_SetAllInt_;

    extern fn _1_ImGuiStorage_BuildSortByKey_(self: *ImGuiStorage) void;
    pub const BuildSortByKey = _1_ImGuiStorage_BuildSortByKey_;
};

pub const ImGuiListClipper = extern struct {
    Ctx: [*c]ImGuiContext,
    DisplayStart: c_int,
    DisplayEnd: c_int,
    ItemsCount: c_int,
    ItemsHeight: f32,
    StartPosY: f32,
    TempData: ?*anyopaque,

    extern fn _1_ImGuiListClipper_init_() ImGuiListClipper;
    pub const init = _1_ImGuiListClipper_init_;

    extern fn _1_ImGuiListClipper_deinit_(self: *ImGuiListClipper) void;
    pub const deinit = _1_ImGuiListClipper_deinit_;

    extern fn _1_ImGuiListClipper_Begin_(self: *ImGuiListClipper, items_count: c_int, items_height: f32) void;
    pub const Begin = _1_ImGuiListClipper_Begin_;

    extern fn _1_ImGuiListClipper_End_(self: *ImGuiListClipper) void;
    pub const End = _1_ImGuiListClipper_End_;

    extern fn _1_ImGuiListClipper_Step_(self: *ImGuiListClipper) bool;
    pub const Step = _1_ImGuiListClipper_Step_;

    extern fn _1_ImGuiListClipper_ForceDisplayRangeByIndices_(self: *ImGuiListClipper, item_min: c_int, item_max: c_int) void;
    pub const ForceDisplayRangeByIndices = _1_ImGuiListClipper_ForceDisplayRangeByIndices_;
};

pub const ImColor = extern struct {
    Value: ImVec4,

    extern fn _1_ImColor_init_(r: c_int, g: c_int, b: c_int, a: c_int) ImColor;
    pub const init = _1_ImColor_init_;

    extern fn _2_ImColor_init_(rgba: ImU32) ImColor;
    pub const init2 = _2_ImColor_init_;

    pub inline fn SetHSV(self: *ImColor, h: f32, s: f32, v: f32, a: f32) void {
        ColorConvertHSVtoRGB(h, s, v, self.Value.x, self.Value.y, self.Value.z);
        self.Value.w = a;
    }
    pub fn HSV(h: f32, s: f32, v: f32, a: f32) ImColor {
        var r: f32 = undefined;
        var g: f32 = undefined;
        var b: f32 = undefined;
        ColorConvertHSVtoRGB(h, s, v, r, g, b);
        return .{ .Value = .{ .x = r, .y = g, .z = b, .w = a } };
    }
};

pub const ImDrawCallback = ?*const fn ([*c]const ImDrawList, [*c]const ImDrawCmd) callconv(.C) void;

pub const ImDrawCmd = extern struct {
    ClipRect: ImVec4,
    TextureId: ImTextureID,
    VtxOffset: c_uint,
    IdxOffset: c_uint,
    ElemCount: c_uint,
    UserCallback: ImDrawCallback,
    UserCallbackData: ?*anyopaque,

    extern fn _1_ImDrawCmd_init_() ImDrawCmd;
    pub const init = _1_ImDrawCmd_init_;

    pub inline fn GetTexID(self: *const ImDrawCmd) ImTextureID {
        return self.TextureId;
    }
};

pub const ImDrawVert = extern struct {
    pos: ImVec2,
    uv: ImVec2,
    col: ImU32,
};

pub const ImDrawCmdHeader = extern struct {
    ClipRect: ImVec4,
    TextureId: ImTextureID,
    VtxOffset: c_uint,
};

pub const ImDrawChannel = extern struct {
    _CmdBuffer: ImVector(ImDrawCmd),
    _IdxBuffer: ImVector(ImDrawIdx),
};

pub const ImDrawListSplitter = extern struct {
    _Current: c_int,
    _Count: c_int,
    _Channels: ImVector(ImDrawChannel),

    extern fn _1_ImDrawListSplitter_init_() ImDrawListSplitter;
    pub const init = _1_ImDrawListSplitter_init_;

    extern fn _1_ImDrawListSplitter_deinit_(self: *ImDrawListSplitter) void;
    pub const deinit = _1_ImDrawListSplitter_deinit_;

    pub inline fn Clear(self: *ImDrawListSplitter) void {
        self._Current = 0;
        self._Count = 1;
    }
    extern fn _1_ImDrawListSplitter_ClearFreeMemory_(self: *ImDrawListSplitter) void;
    pub const ClearFreeMemory = _1_ImDrawListSplitter_ClearFreeMemory_;

    extern fn _1_ImDrawListSplitter_Split_(self: *ImDrawListSplitter, draw_list: [*c]ImDrawList, count: c_int) void;
    pub const Split = _1_ImDrawListSplitter_Split_;

    extern fn _1_ImDrawListSplitter_Merge_(self: *ImDrawListSplitter, draw_list: [*c]ImDrawList) void;
    pub const Merge = _1_ImDrawListSplitter_Merge_;

    extern fn _1_ImDrawListSplitter_SetCurrentChannel_(self: *ImDrawListSplitter, draw_list: [*c]ImDrawList, channel_idx: c_int) void;
    pub const SetCurrentChannel = _1_ImDrawListSplitter_SetCurrentChannel_;
};

pub const ImDrawFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImDrawFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const Closed: ImDrawFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const RoundCornersTopLeft: ImDrawFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const RoundCornersTopRight: ImDrawFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const RoundCornersBottomLeft: ImDrawFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const RoundCornersBottomRight: ImDrawFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const RoundCornersNone: ImDrawFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const RoundCornersTop: ImDrawFlags = .{ .bits = @intCast(c_uint, ImDrawFlags.RoundCornersTopLeft.bits | ImDrawFlags.RoundCornersTopRight.bits) };
    pub const RoundCornersBottom: ImDrawFlags = .{ .bits = @intCast(c_uint, ImDrawFlags.RoundCornersBottomLeft.bits | ImDrawFlags.RoundCornersBottomRight.bits) };
    pub const RoundCornersLeft: ImDrawFlags = .{ .bits = @intCast(c_uint, ImDrawFlags.RoundCornersBottomLeft.bits | ImDrawFlags.RoundCornersTopLeft.bits) };
    pub const RoundCornersRight: ImDrawFlags = .{ .bits = @intCast(c_uint, ImDrawFlags.RoundCornersBottomRight.bits | ImDrawFlags.RoundCornersTopRight.bits) };
    pub const RoundCornersAll: ImDrawFlags = .{ .bits = @intCast(c_uint, ImDrawFlags.RoundCornersTopLeft.bits | ImDrawFlags.RoundCornersTopRight.bits | ImDrawFlags.RoundCornersBottomLeft.bits | ImDrawFlags.RoundCornersBottomRight.bits) };
    pub const RoundCornersDefault_: ImDrawFlags = .{ .bits = @intCast(c_uint, ImDrawFlags.RoundCornersAll.bits) };
    pub const RoundCornersMask_: ImDrawFlags = .{ .bits = @intCast(c_uint, ImDrawFlags.RoundCornersAll.bits | ImDrawFlags.RoundCornersNone.bits) };

    // pub usingnamespace cpp.FlagsMixin(ImDrawFlags_);
};

pub const ImDrawListFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImDrawListFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const AntiAliasedLines: ImDrawListFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const AntiAliasedLinesUseTex: ImDrawListFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const AntiAliasedFill: ImDrawListFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const AllowVtxOffset: ImDrawListFlags = .{ .bits = @intCast(c_uint, 1 << 3) };

    // pub usingnamespace cpp.FlagsMixin(ImDrawListFlags_);
};

pub const ImDrawList = extern struct {
    CmdBuffer: ImVector(ImDrawCmd),
    IdxBuffer: ImVector(ImDrawIdx),
    VtxBuffer: ImVector(ImDrawVert),
    Flags: ImDrawListFlags,
    _VtxCurrentIdx: c_uint,
    _Data: [*c]ImDrawListSharedData,
    _OwnerName: [*c]const u8,
    _VtxWritePtr: [*c]ImDrawVert,
    _IdxWritePtr: [*c]ImDrawIdx,
    _ClipRectStack: ImVector(ImVec4),
    _TextureIdStack: ImVector(ImTextureID),
    _Path: ImVector(ImVec2),
    _CmdHeader: ImDrawCmdHeader,
    _Splitter: ImDrawListSplitter,
    _FringeScale: f32,

    extern fn _1_ImDrawList_init_(shared_data: [*c]ImDrawListSharedData) ImDrawList;
    pub const init = _1_ImDrawList_init_;

    extern fn _1_ImDrawList_deinit_(self: *ImDrawList) void;
    pub const deinit = _1_ImDrawList_deinit_;

    extern fn _1_ImDrawList_PushClipRect_(self: *ImDrawList, clip_rect_min: *const ImVec2, clip_rect_max: *const ImVec2, intersect_with_current_clip_rect: bool) void;
    pub const PushClipRect = _1_ImDrawList_PushClipRect_;

    extern fn _1_ImDrawList_PushClipRectFullScreen_(self: *ImDrawList) void;
    pub const PushClipRectFullScreen = _1_ImDrawList_PushClipRectFullScreen_;

    extern fn _1_ImDrawList_PopClipRect_(self: *ImDrawList) void;
    pub const PopClipRect = _1_ImDrawList_PopClipRect_;

    extern fn _1_ImDrawList_PushTextureID_(self: *ImDrawList, texture_id: ImTextureID) void;
    pub const PushTextureID = _1_ImDrawList_PushTextureID_;

    extern fn _1_ImDrawList_PopTextureID_(self: *ImDrawList) void;
    pub const PopTextureID = _1_ImDrawList_PopTextureID_;

    pub inline fn GetClipRectMin(self: *const ImDrawList) ImVec2 {
        const cr: *ImVec4 = self._ClipRectStack.back();
        return .{ .x = cr.x, .y = cr.y };
    }

    pub inline fn GetClipRectMax(self: *const ImDrawList) ImVec2 {
        const cr: *ImVec4 = self._ClipRectStack.back();
        return .{ .x = cr.z, .y = cr.w };
    }

    extern fn _1_ImDrawList_AddLine_(self: *ImDrawList, p1: *const ImVec2, p2: *const ImVec2, col: ImU32, thickness: f32) void;
    pub const AddLine = _1_ImDrawList_AddLine_;

    extern fn _1_ImDrawList_AddRect_(self: *ImDrawList, p_min: *const ImVec2, p_max: *const ImVec2, col: ImU32, rounding: f32, flags: ImDrawFlags, thickness: f32) void;
    pub const AddRect = _1_ImDrawList_AddRect_;

    extern fn _1_ImDrawList_AddRectFilled_(self: *ImDrawList, p_min: *const ImVec2, p_max: *const ImVec2, col: ImU32, rounding: f32, flags: ImDrawFlags) void;
    pub const AddRectFilled = _1_ImDrawList_AddRectFilled_;

    extern fn _1_ImDrawList_AddRectFilledMultiColor_(self: *ImDrawList, p_min: *const ImVec2, p_max: *const ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32) void;
    pub const AddRectFilledMultiColor = _1_ImDrawList_AddRectFilledMultiColor_;

    extern fn _1_ImDrawList_AddQuad_(self: *ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, col: ImU32, thickness: f32) void;
    pub const AddQuad = _1_ImDrawList_AddQuad_;

    extern fn _1_ImDrawList_AddQuadFilled_(self: *ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, col: ImU32) void;
    pub const AddQuadFilled = _1_ImDrawList_AddQuadFilled_;

    extern fn _1_ImDrawList_AddTriangle_(self: *ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, col: ImU32, thickness: f32) void;
    pub const AddTriangle = _1_ImDrawList_AddTriangle_;

    extern fn _1_ImDrawList_AddTriangleFilled_(self: *ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, col: ImU32) void;
    pub const AddTriangleFilled = _1_ImDrawList_AddTriangleFilled_;

    extern fn _1_ImDrawList_AddCircle_(self: *ImDrawList, center: *const ImVec2, radius: f32, col: ImU32, num_segments: c_int, thickness: f32) void;
    pub const AddCircle = _1_ImDrawList_AddCircle_;

    extern fn _1_ImDrawList_AddCircleFilled_(self: *ImDrawList, center: *const ImVec2, radius: f32, col: ImU32, num_segments: c_int) void;
    pub const AddCircleFilled = _1_ImDrawList_AddCircleFilled_;

    extern fn _1_ImDrawList_AddNgon_(self: *ImDrawList, center: *const ImVec2, radius: f32, col: ImU32, num_segments: c_int, thickness: f32) void;
    pub const AddNgon = _1_ImDrawList_AddNgon_;

    extern fn _1_ImDrawList_AddNgonFilled_(self: *ImDrawList, center: *const ImVec2, radius: f32, col: ImU32, num_segments: c_int) void;
    pub const AddNgonFilled = _1_ImDrawList_AddNgonFilled_;

    extern fn _1_ImDrawList_AddText_(self: *ImDrawList, pos: *const ImVec2, col: ImU32, text_begin: [*c]const u8, text_end: [*c]const u8) void;
    pub const AddText = _1_ImDrawList_AddText_;

    extern fn _2_ImDrawList_AddText_(self: *ImDrawList, font: [*c]const ImFont, font_size: f32, pos: *const ImVec2, col: ImU32, text_begin: [*c]const u8, text_end: [*c]const u8, wrap_width: f32, cpu_fine_clip_rect: [*c]const ImVec4) void;
    pub const AddText__Overload2 = _2_ImDrawList_AddText_;

    extern fn _1_ImDrawList_AddPolyline_(self: *ImDrawList, points: [*c]const ImVec2, num_points: c_int, col: ImU32, flags: ImDrawFlags, thickness: f32) void;
    pub const AddPolyline = _1_ImDrawList_AddPolyline_;

    extern fn _1_ImDrawList_AddConvexPolyFilled_(self: *ImDrawList, points: [*c]const ImVec2, num_points: c_int, col: ImU32) void;
    pub const AddConvexPolyFilled = _1_ImDrawList_AddConvexPolyFilled_;

    extern fn _1_ImDrawList_AddBezierCubic_(self: *ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, col: ImU32, thickness: f32, num_segments: c_int) void;
    pub const AddBezierCubic = _1_ImDrawList_AddBezierCubic_;

    extern fn _1_ImDrawList_AddBezierQuadratic_(self: *ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, col: ImU32, thickness: f32, num_segments: c_int) void;
    pub const AddBezierQuadratic = _1_ImDrawList_AddBezierQuadratic_;

    extern fn _1_ImDrawList_AddImage_(self: *ImDrawList, user_texture_id: ImTextureID, p_min: *const ImVec2, p_max: *const ImVec2, uv_min: *const ImVec2, uv_max: *const ImVec2, col: ImU32) void;
    pub const AddImage = _1_ImDrawList_AddImage_;

    extern fn _1_ImDrawList_AddImageQuad_(self: *ImDrawList, user_texture_id: ImTextureID, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, uv1: *const ImVec2, uv2: *const ImVec2, uv3: *const ImVec2, uv4: *const ImVec2, col: ImU32) void;
    pub const AddImageQuad = _1_ImDrawList_AddImageQuad_;

    extern fn _1_ImDrawList_AddImageRounded_(self: *ImDrawList, user_texture_id: ImTextureID, p_min: *const ImVec2, p_max: *const ImVec2, uv_min: *const ImVec2, uv_max: *const ImVec2, col: ImU32, rounding: f32, flags: ImDrawFlags) void;
    pub const AddImageRounded = _1_ImDrawList_AddImageRounded_;

    pub inline fn PathClear(self: *ImDrawList) void {
        self._Path.Size = 0;
    }
    pub inline fn PathLineTo(self: *ImDrawList, pos: *const ImVec2) void {
        self.push_back(pos);
    }
    pub inline fn PathLineToMergeDuplicate(self: *ImDrawList, pos: *const ImVec2) void {
        if (self._Path.Size == 0 or memcmp(@bitCast(?*const anyopaque, &self._Path.Data[self._Path.Size - 1]), @bitCast(?*const anyopaque, &pos), @intCast(usize, 8)) != 0) self.push_back(pos);
    }
    pub inline fn PathFillConvex(self: *ImDrawList, col: ImU32) void {
        self.AddConvexPolyFilled(self._Path.Data, self._Path.Size, col);
        self._Path.Size = 0;
    }
    pub inline fn PathStroke(self: *ImDrawList, col: ImU32, flags: ImDrawFlags, thickness: f32) void {
        self.AddPolyline(self._Path.Data, self._Path.Size, col, flags, thickness);
        self._Path.Size = 0;
    }
    extern fn _1_ImDrawList_PathArcTo_(self: *ImDrawList, center: *const ImVec2, radius: f32, a_min: f32, a_max: f32, num_segments: c_int) void;
    pub const PathArcTo = _1_ImDrawList_PathArcTo_;

    extern fn _1_ImDrawList_PathArcToFast_(self: *ImDrawList, center: *const ImVec2, radius: f32, a_min_of_12: c_int, a_max_of_12: c_int) void;
    pub const PathArcToFast = _1_ImDrawList_PathArcToFast_;

    extern fn _1_ImDrawList_PathBezierCubicCurveTo_(self: *ImDrawList, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, num_segments: c_int) void;
    pub const PathBezierCubicCurveTo = _1_ImDrawList_PathBezierCubicCurveTo_;

    extern fn _1_ImDrawList_PathBezierQuadraticCurveTo_(self: *ImDrawList, p2: *const ImVec2, p3: *const ImVec2, num_segments: c_int) void;
    pub const PathBezierQuadraticCurveTo = _1_ImDrawList_PathBezierQuadraticCurveTo_;

    extern fn _1_ImDrawList_PathRect_(self: *ImDrawList, rect_min: *const ImVec2, rect_max: *const ImVec2, rounding: f32, flags: ImDrawFlags) void;
    pub const PathRect = _1_ImDrawList_PathRect_;

    extern fn _1_ImDrawList_AddCallback_(self: *ImDrawList, callback: ImDrawCallback, callback_data: ?*anyopaque) void;
    pub const AddCallback = _1_ImDrawList_AddCallback_;

    extern fn _1_ImDrawList_AddDrawCmd_(self: *ImDrawList) void;
    pub const AddDrawCmd = _1_ImDrawList_AddDrawCmd_;

    extern fn _1_ImDrawList_CloneOutput_(self: *const ImDrawList) [*c]ImDrawList;
    pub const CloneOutput = _1_ImDrawList_CloneOutput_;

    pub inline fn ChannelsSplit(self: *ImDrawList, count: c_int) void {
        self.Split(self, count);
    }
    pub inline fn ChannelsMerge(self: *ImDrawList) void {
        self.Merge(self);
    }
    pub inline fn ChannelsSetCurrent(self: *ImDrawList, n: c_int) void {
        self.SetCurrentChannel(self, n);
    }
    extern fn _1_ImDrawList_PrimReserve_(self: *ImDrawList, idx_count: c_int, vtx_count: c_int) void;
    pub const PrimReserve = _1_ImDrawList_PrimReserve_;

    extern fn _1_ImDrawList_PrimUnreserve_(self: *ImDrawList, idx_count: c_int, vtx_count: c_int) void;
    pub const PrimUnreserve = _1_ImDrawList_PrimUnreserve_;

    extern fn _1_ImDrawList_PrimRect_(self: *ImDrawList, a: *const ImVec2, b: *const ImVec2, col: ImU32) void;
    pub const PrimRect = _1_ImDrawList_PrimRect_;

    extern fn _1_ImDrawList_PrimRectUV_(self: *ImDrawList, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: ImU32) void;
    pub const PrimRectUV = _1_ImDrawList_PrimRectUV_;

    extern fn _1_ImDrawList_PrimQuadUV_(self: *ImDrawList, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, uv_c: *const ImVec2, uv_d: *const ImVec2, col: ImU32) void;
    pub const PrimQuadUV = _1_ImDrawList_PrimQuadUV_;

    pub inline fn PrimWriteVtx(self: *ImDrawList, pos: *const ImVec2, uv: *const ImVec2, col: ImU32) void {
        self._VtxWritePtr.pos.copyFrom(pos);
        self._VtxWritePtr.uv.copyFrom(uv);
        self._VtxWritePtr.col = col;
        self._VtxWritePtr += 1;
        self._VtxCurrentIdx += 1;
    }
    pub inline fn PrimWriteIdx(self: *ImDrawList, idx: ImDrawIdx) void {
        self._IdxWritePtr.* = idx;
        self._IdxWritePtr += 1;
    }
    pub inline fn PrimVtx(self: *ImDrawList, pos: *const ImVec2, uv: *const ImVec2, col: ImU32) void {
        self.PrimWriteIdx(@intCast(ImDrawIdx, self._VtxCurrentIdx));
        self.PrimWriteVtx(pos, uv, col);
    }
    extern fn _1_ImDrawList__ResetForNewFrame_(self: *ImDrawList) void;
    pub const _ResetForNewFrame = _1_ImDrawList__ResetForNewFrame_;

    extern fn _1_ImDrawList__ClearFreeMemory_(self: *ImDrawList) void;
    pub const _ClearFreeMemory = _1_ImDrawList__ClearFreeMemory_;

    extern fn _1_ImDrawList__PopUnusedDrawCmd_(self: *ImDrawList) void;
    pub const _PopUnusedDrawCmd = _1_ImDrawList__PopUnusedDrawCmd_;

    extern fn _1_ImDrawList__TryMergeDrawCmds_(self: *ImDrawList) void;
    pub const _TryMergeDrawCmds = _1_ImDrawList__TryMergeDrawCmds_;

    extern fn _1_ImDrawList__OnChangedClipRect_(self: *ImDrawList) void;
    pub const _OnChangedClipRect = _1_ImDrawList__OnChangedClipRect_;

    extern fn _1_ImDrawList__OnChangedTextureID_(self: *ImDrawList) void;
    pub const _OnChangedTextureID = _1_ImDrawList__OnChangedTextureID_;

    extern fn _1_ImDrawList__OnChangedVtxOffset_(self: *ImDrawList) void;
    pub const _OnChangedVtxOffset = _1_ImDrawList__OnChangedVtxOffset_;

    extern fn _1_ImDrawList__CalcCircleAutoSegmentCount_(self: *const ImDrawList, radius: f32) c_int;
    pub const _CalcCircleAutoSegmentCount = _1_ImDrawList__CalcCircleAutoSegmentCount_;

    extern fn _1_ImDrawList__PathArcToFastEx_(self: *ImDrawList, center: *const ImVec2, radius: f32, a_min_sample: c_int, a_max_sample: c_int, a_step: c_int) void;
    pub const _PathArcToFastEx = _1_ImDrawList__PathArcToFastEx_;

    extern fn _1_ImDrawList__PathArcToN_(self: *ImDrawList, center: *const ImVec2, radius: f32, a_min: f32, a_max: f32, num_segments: c_int) void;
    pub const _PathArcToN = _1_ImDrawList__PathArcToN_;
};

pub const ImDrawData = extern struct {
    Valid: bool,
    CmdListsCount: c_int,
    TotalIdxCount: c_int,
    TotalVtxCount: c_int,
    CmdLists: [*c][*c]ImDrawList,
    DisplayPos: ImVec2,
    DisplaySize: ImVec2,
    FramebufferScale: ImVec2,
    OwnerViewport: [*c]ImGuiViewport,

    extern fn _1_ImDrawData_init_() ImDrawData;
    pub const init = _1_ImDrawData_init_;

    pub fn Clear(self: *ImDrawData) void {
        memset(@bitCast(?*anyopaque, self), 0, @sizeOf(self.*));
    }
    extern fn _1_ImDrawData_DeIndexAllBuffers_(self: *ImDrawData) void;
    pub const DeIndexAllBuffers = _1_ImDrawData_DeIndexAllBuffers_;

    extern fn _1_ImDrawData_ScaleClipRects_(self: *ImDrawData, fb_scale: *const ImVec2) void;
    pub const ScaleClipRects = _1_ImDrawData_ScaleClipRects_;
};

pub const ImFontConfig = extern struct {
    FontData: ?*anyopaque,
    FontDataSize: c_int,
    FontDataOwnedByAtlas: bool,
    FontNo: c_int,
    SizePixels: f32,
    OversampleH: c_int,
    OversampleV: c_int,
    PixelSnapH: bool,
    GlyphExtraSpacing: ImVec2,
    GlyphOffset: ImVec2,
    GlyphRanges: [*c]const ImWchar,
    GlyphMinAdvanceX: f32,
    GlyphMaxAdvanceX: f32,
    MergeMode: bool,
    FontBuilderFlags: c_uint,
    RasterizerMultiply: f32,
    EllipsisChar: ImWchar,
    Name: [40]u8,
    DstFont: [*c]ImFont,

    extern fn _1_ImFontConfig_init_() ImFontConfig;
    pub const init = _1_ImFontConfig_init_;
};

pub const ImFontGlyph = extern struct {
    Colored: c_uint,
    Visible: c_uint,
    Codepoint: c_uint,
    AdvanceX: f32,
    X0: f32,
    Y0: f32,
    X1: f32,
    Y1: f32,
    U0: f32,
    V0: f32,
    U1: f32,
    V1: f32,
};

pub const ImFontGlyphRangesBuilder = extern struct {
    UsedChars: ImVector(ImU32),

    extern fn _1_ImFontGlyphRangesBuilder_init_() ImFontGlyphRangesBuilder;
    pub const init = _1_ImFontGlyphRangesBuilder_init_;

    pub inline fn Clear(self: *ImFontGlyphRangesBuilder) void {
        var size_in_bytes: c_int = (65535 + 1) / 8;
        self.resize(size_in_bytes / @intCast(c_int, @sizeOf(ImU32)));
        memset(@bitCast(?*anyopaque, self.UsedChars.Data), 0, @intCast(usize, size_in_bytes));
    }
    pub inline fn GetBit(self: *const ImFontGlyphRangesBuilder, n: usize) bool {
        var off: c_int = @intCast(c_int, (n >> 5));
        var mask: ImU32 = 1 << (n & @intCast(usize, 31));
        return (self.UsedChars.get(off) & mask) != @intCast(c_uint, 0);
    }
    pub inline fn SetBit(self: *ImFontGlyphRangesBuilder, n: usize) void {
        var off: c_int = @intCast(c_int, (n >> 5));
        var mask: ImU32 = 1 << (n & @intCast(usize, 31));
        self.UsedChars.getPtr(off).* |= mask;
    }
    pub inline fn AddChar(self: *ImFontGlyphRangesBuilder, c: ImWchar) void {
        self.SetBit(@intCast(usize, c));
    }
    extern fn _1_ImFontGlyphRangesBuilder_AddText_(self: *ImFontGlyphRangesBuilder, text: [*c]const u8, text_end: [*c]const u8) void;
    pub const AddText = _1_ImFontGlyphRangesBuilder_AddText_;

    extern fn _1_ImFontGlyphRangesBuilder_AddRanges_(self: *ImFontGlyphRangesBuilder, ranges: [*c]const ImWchar) void;
    pub const AddRanges = _1_ImFontGlyphRangesBuilder_AddRanges_;

    extern fn _1_ImFontGlyphRangesBuilder_BuildRanges_(self: *ImFontGlyphRangesBuilder, out_ranges: [*c]ImVector(ImWchar)) void;
    pub const BuildRanges = _1_ImFontGlyphRangesBuilder_BuildRanges_;
};

pub const ImFontAtlasCustomRect = extern struct {
    Width: c_ushort,
    Height: c_ushort,
    X: c_ushort,
    Y: c_ushort,
    GlyphID: c_uint,
    GlyphAdvanceX: f32,
    GlyphOffset: ImVec2,
    Font: [*c]ImFont,

    extern fn _1_ImFontAtlasCustomRect_init_() ImFontAtlasCustomRect;
    pub const init = _1_ImFontAtlasCustomRect_init_;

    pub fn IsPacked(self: *const ImFontAtlasCustomRect) bool {
        return @intCast(c_int, self.X) != 65535;
    }
};

pub const ImFontAtlasFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImFontAtlasFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const NoPowerOfTwoHeight: ImFontAtlasFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const NoMouseCursors: ImFontAtlasFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const NoBakedLines: ImFontAtlasFlags = .{ .bits = @intCast(c_uint, 1 << 2) };

    // pub usingnamespace cpp.FlagsMixin(ImFontAtlasFlags_);
};

pub const ImFontAtlas = extern struct {
    Flags: ImFontAtlasFlags,
    TexID: ImTextureID,
    TexDesiredWidth: c_int,
    TexGlyphPadding: c_int,
    Locked: bool,
    UserData: ?*anyopaque,
    TexReady: bool,
    TexPixelsUseColors: bool,
    TexPixelsAlpha8: [*c]u8,
    TexPixelsRGBA32: [*c]c_uint,
    TexWidth: c_int,
    TexHeight: c_int,
    TexUvScale: ImVec2,
    TexUvWhitePixel: ImVec2,
    Fonts: ImVector([*c]ImFont),
    CustomRects: ImVector(ImFontAtlasCustomRect),
    ConfigData: ImVector(ImFontConfig),
    TexUvLines: [64]ImVec4,
    FontBuilderIO: [*c]const ImFontBuilderIO,
    FontBuilderFlags: c_uint,
    PackIdMouseCursors: c_int,
    PackIdLines: c_int,

    extern fn _1_ImFontAtlas_init_() ImFontAtlas;
    pub const init = _1_ImFontAtlas_init_;

    extern fn _1_ImFontAtlas_deinit_(self: *ImFontAtlas) void;
    pub const deinit = _1_ImFontAtlas_deinit_;

    extern fn _1_ImFontAtlas_AddFont_(self: *ImFontAtlas, font_cfg: [*c]const ImFontConfig) [*c]ImFont;
    pub const AddFont = _1_ImFontAtlas_AddFont_;

    extern fn _1_ImFontAtlas_AddFontDefault_(self: *ImFontAtlas, font_cfg: [*c]const ImFontConfig) [*c]ImFont;
    pub const AddFontDefault = _1_ImFontAtlas_AddFontDefault_;

    extern fn _1_ImFontAtlas_AddFontFromFileTTF_(self: *ImFontAtlas, filename: [*c]const u8, size_pixels: f32, font_cfg: [*c]const ImFontConfig, glyph_ranges: [*c]const ImWchar) [*c]ImFont;
    pub const AddFontFromFileTTF = _1_ImFontAtlas_AddFontFromFileTTF_;

    extern fn _1_ImFontAtlas_AddFontFromMemoryTTF_(self: *ImFontAtlas, font_data: ?*anyopaque, font_size: c_int, size_pixels: f32, font_cfg: [*c]const ImFontConfig, glyph_ranges: [*c]const ImWchar) [*c]ImFont;
    pub const AddFontFromMemoryTTF = _1_ImFontAtlas_AddFontFromMemoryTTF_;

    extern fn _1_ImFontAtlas_AddFontFromMemoryCompressedTTF_(self: *ImFontAtlas, compressed_font_data: ?*const anyopaque, compressed_font_size: c_int, size_pixels: f32, font_cfg: [*c]const ImFontConfig, glyph_ranges: [*c]const ImWchar) [*c]ImFont;
    pub const AddFontFromMemoryCompressedTTF = _1_ImFontAtlas_AddFontFromMemoryCompressedTTF_;

    extern fn _1_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF_(self: *ImFontAtlas, compressed_font_data_base85: [*c]const u8, size_pixels: f32, font_cfg: [*c]const ImFontConfig, glyph_ranges: [*c]const ImWchar) [*c]ImFont;
    pub const AddFontFromMemoryCompressedBase85TTF = _1_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF_;

    extern fn _1_ImFontAtlas_ClearInputData_(self: *ImFontAtlas) void;
    pub const ClearInputData = _1_ImFontAtlas_ClearInputData_;

    extern fn _1_ImFontAtlas_ClearTexData_(self: *ImFontAtlas) void;
    pub const ClearTexData = _1_ImFontAtlas_ClearTexData_;

    extern fn _1_ImFontAtlas_ClearFonts_(self: *ImFontAtlas) void;
    pub const ClearFonts = _1_ImFontAtlas_ClearFonts_;

    extern fn _1_ImFontAtlas_Clear_(self: *ImFontAtlas) void;
    pub const Clear = _1_ImFontAtlas_Clear_;

    extern fn _1_ImFontAtlas_Build_(self: *ImFontAtlas) bool;
    pub const Build = _1_ImFontAtlas_Build_;

    extern fn _1_ImFontAtlas_GetTexDataAsAlpha8_(self: *ImFontAtlas, out_pixels: [*c][*c]u8, out_width: [*c]c_int, out_height: [*c]c_int, out_bytes_per_pixel: [*c]c_int) void;
    pub const GetTexDataAsAlpha8 = _1_ImFontAtlas_GetTexDataAsAlpha8_;

    extern fn _1_ImFontAtlas_GetTexDataAsRGBA32_(self: *ImFontAtlas, out_pixels: [*c][*c]u8, out_width: [*c]c_int, out_height: [*c]c_int, out_bytes_per_pixel: [*c]c_int) void;
    pub const GetTexDataAsRGBA32 = _1_ImFontAtlas_GetTexDataAsRGBA32_;

    pub fn IsBuilt(self: *const ImFontAtlas) bool {
        return self.Fonts.Size > 0 and self.TexReady;
    }
    pub fn SetTexID(self: *ImFontAtlas, id: ImTextureID) void {
        self.TexID = id;
    }
    extern fn _1_ImFontAtlas_GetGlyphRangesDefault_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesDefault = _1_ImFontAtlas_GetGlyphRangesDefault_;

    extern fn _1_ImFontAtlas_GetGlyphRangesGreek_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesGreek = _1_ImFontAtlas_GetGlyphRangesGreek_;

    extern fn _1_ImFontAtlas_GetGlyphRangesKorean_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesKorean = _1_ImFontAtlas_GetGlyphRangesKorean_;

    extern fn _1_ImFontAtlas_GetGlyphRangesJapanese_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesJapanese = _1_ImFontAtlas_GetGlyphRangesJapanese_;

    extern fn _1_ImFontAtlas_GetGlyphRangesChineseFull_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesChineseFull = _1_ImFontAtlas_GetGlyphRangesChineseFull_;

    extern fn _1_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesChineseSimplifiedCommon = _1_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon_;

    extern fn _1_ImFontAtlas_GetGlyphRangesCyrillic_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesCyrillic = _1_ImFontAtlas_GetGlyphRangesCyrillic_;

    extern fn _1_ImFontAtlas_GetGlyphRangesThai_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesThai = _1_ImFontAtlas_GetGlyphRangesThai_;

    extern fn _1_ImFontAtlas_GetGlyphRangesVietnamese_(self: *ImFontAtlas) [*c]const ImWchar;
    pub const GetGlyphRangesVietnamese = _1_ImFontAtlas_GetGlyphRangesVietnamese_;

    extern fn _1_ImFontAtlas_AddCustomRectRegular_(self: *ImFontAtlas, width: c_int, height: c_int) c_int;
    pub const AddCustomRectRegular = _1_ImFontAtlas_AddCustomRectRegular_;

    extern fn _1_ImFontAtlas_AddCustomRectFontGlyph_(self: *ImFontAtlas, font: [*c]ImFont, id: ImWchar, width: c_int, height: c_int, advance_x: f32, offset: *const ImVec2) c_int;
    pub const AddCustomRectFontGlyph = _1_ImFontAtlas_AddCustomRectFontGlyph_;

    pub fn GetCustomRectByIndex(self: *ImFontAtlas, index: c_int) [*c]ImFontAtlasCustomRect {
        ImAssert(index >= 0);
        return &self.CustomRects.getPtr(index).*;
    }
    extern fn _1_ImFontAtlas_CalcCustomRectUV_(self: *const ImFontAtlas, rect: [*c]const ImFontAtlasCustomRect, out_uv_min: [*c]ImVec2, out_uv_max: [*c]ImVec2) void;
    pub const CalcCustomRectUV = _1_ImFontAtlas_CalcCustomRectUV_;

    extern fn _1_ImFontAtlas_GetMouseCursorTexData_(self: *ImFontAtlas, cursor: ImGuiMouseCursor, out_offset: [*c]ImVec2, out_size: [*c]ImVec2, out_uv_border: [*c]ImVec2, out_uv_fill: [*c]ImVec2) bool;
    pub const GetMouseCursorTexData = _1_ImFontAtlas_GetMouseCursorTexData_;
};

pub const ImFont = extern struct {
    IndexAdvanceX: ImVector(f32),
    FallbackAdvanceX: f32,
    FontSize: f32,
    IndexLookup: ImVector(ImWchar),
    Glyphs: ImVector(ImFontGlyph),
    FallbackGlyph: [*c]const ImFontGlyph,
    ContainerAtlas: [*c]ImFontAtlas,
    ConfigData: [*c]const ImFontConfig,
    ConfigDataCount: c_short,
    FallbackChar: ImWchar,
    EllipsisChar: ImWchar,
    EllipsisCharCount: c_short,
    EllipsisWidth: f32,
    EllipsisCharStep: f32,
    DirtyLookupTables: bool,
    Scale: f32,
    Ascent: f32,
    Descent: f32,
    MetricsTotalSurface: c_int,
    Used4kPagesMap: [2]ImU8,

    extern fn _1_ImFont_init_() ImFont;
    pub const init = _1_ImFont_init_;

    extern fn _1_ImFont_deinit_(self: *ImFont) void;
    pub const deinit = _1_ImFont_deinit_;

    extern fn _1_ImFont_FindGlyph_(self: *const ImFont, c: ImWchar) [*c]const ImFontGlyph;
    pub const FindGlyph = _1_ImFont_FindGlyph_;

    extern fn _1_ImFont_FindGlyphNoFallback_(self: *const ImFont, c: ImWchar) [*c]const ImFontGlyph;
    pub const FindGlyphNoFallback = _1_ImFont_FindGlyphNoFallback_;

    pub fn GetCharAdvance(self: *const ImFont, c: ImWchar) f32 {
        return if ((@intCast(c_int, c) < self.IndexAdvanceX.Size)) self.IndexAdvanceX.get(@intCast(c_int, c)) else self.FallbackAdvanceX;
    }
    pub fn IsLoaded(self: *const ImFont) bool {
        return self.ContainerAtlas != null;
    }
    pub fn GetDebugName(self: *const ImFont) [*c]const u8 {
        return if (@as(bool, self.ConfigData)) @as([*c]const u8, self.ConfigData.Name) else @as([*c]const u8, "\"<unknown>\"");
    }
    extern fn _1_ImFont_CalcTextSizeA_(self: *const ImFont, size: f32, max_width: f32, wrap_width: f32, text_begin: [*c]const u8, text_end: [*c]const u8, remaining: [*c]const [*c]u8) ImVec2;
    pub const CalcTextSizeA = _1_ImFont_CalcTextSizeA_;

    extern fn _1_ImFont_CalcWordWrapPositionA_(self: *const ImFont, scale: f32, text: [*c]const u8, text_end: [*c]const u8, wrap_width: f32) [*c]const u8;
    pub const CalcWordWrapPositionA = _1_ImFont_CalcWordWrapPositionA_;

    extern fn _1_ImFont_RenderChar_(self: *const ImFont, draw_list: [*c]ImDrawList, size: f32, pos: *const ImVec2, col: ImU32, c: ImWchar) void;
    pub const RenderChar = _1_ImFont_RenderChar_;

    extern fn _1_ImFont_RenderText_(self: *const ImFont, draw_list: [*c]ImDrawList, size: f32, pos: *const ImVec2, col: ImU32, clip_rect: *const ImVec4, text_begin: [*c]const u8, text_end: [*c]const u8, wrap_width: f32, cpu_fine_clip: bool) void;
    pub const RenderText = _1_ImFont_RenderText_;

    extern fn _1_ImFont_BuildLookupTable_(self: *ImFont) void;
    pub const BuildLookupTable = _1_ImFont_BuildLookupTable_;

    extern fn _1_ImFont_ClearOutputData_(self: *ImFont) void;
    pub const ClearOutputData = _1_ImFont_ClearOutputData_;

    extern fn _1_ImFont_GrowIndex_(self: *ImFont, new_size: c_int) void;
    pub const GrowIndex = _1_ImFont_GrowIndex_;

    extern fn _1_ImFont_AddGlyph_(self: *ImFont, src_cfg: [*c]const ImFontConfig, c: ImWchar, x0: f32, y0: f32, x1: f32, y1: f32, u0: f32, v0: f32, u1: f32, v1: f32, advance_x: f32) void;
    pub const AddGlyph = _1_ImFont_AddGlyph_;

    extern fn _1_ImFont_AddRemapChar_(self: *ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool) void;
    pub const AddRemapChar = _1_ImFont_AddRemapChar_;

    extern fn _1_ImFont_SetGlyphVisible_(self: *ImFont, c: ImWchar, visible: bool) void;
    pub const SetGlyphVisible = _1_ImFont_SetGlyphVisible_;

    extern fn _1_ImFont_IsGlyphRangeUnused_(self: *ImFont, c_begin: c_uint, c_last: c_uint) bool;
    pub const IsGlyphRangeUnused = _1_ImFont_IsGlyphRangeUnused_;
};

pub const ImGuiViewportFlags = extern struct {
    bits: c_int = 0,

    pub const None: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 0) };
    pub const IsPlatformWindow: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 0) };
    pub const IsPlatformMonitor: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 1) };
    pub const OwnedByApp: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 2) };
    pub const NoDecoration: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 3) };
    pub const NoTaskBarIcon: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 4) };
    pub const NoFocusOnAppearing: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 5) };
    pub const NoFocusOnClick: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 6) };
    pub const NoInputs: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 7) };
    pub const NoRendererClear: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 8) };
    pub const NoAutoMerge: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 9) };
    pub const TopMost: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 10) };
    pub const CanHostOtherWindows: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 11) };
    pub const IsMinimized: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 12) };
    pub const IsFocused: ImGuiViewportFlags = .{ .bits = @intCast(c_uint, 1 << 13) };

    // pub usingnamespace cpp.FlagsMixin(ImGuiViewportFlags_);
};

pub const ImGuiViewport = extern struct {
    ID: ImGuiID,
    Flags: ImGuiViewportFlags,
    Pos: ImVec2,
    Size: ImVec2,
    WorkPos: ImVec2,
    WorkSize: ImVec2,
    DpiScale: f32,
    ParentViewportId: ImGuiID,
    DrawData: [*c]ImDrawData,
    RendererUserData: ?*anyopaque,
    PlatformUserData: ?*anyopaque,
    PlatformHandle: ?*anyopaque,
    PlatformHandleRaw: ?*anyopaque,
    PlatformWindowCreated: bool,
    PlatformRequestMove: bool,
    PlatformRequestResize: bool,
    PlatformRequestClose: bool,

    extern fn _1_ImGuiViewport_init_() ImGuiViewport;
    pub const init = _1_ImGuiViewport_init_;

    extern fn _1_ImGuiViewport_deinit_(self: *ImGuiViewport) void;
    pub const deinit = _1_ImGuiViewport_deinit_;

    pub fn GetCenter(self: *const ImGuiViewport) ImVec2 {
        return .{
            .x = self.Pos.x + self.Size.x * 0.5,
            .y = self.Pos.y + self.Size.y * 0.5,
        };
    }

    pub fn GetWorkCenter(self: *const ImGuiViewport) ImVec2 {
        return .{
            .x = self.WorkPos.x + self.WorkSize.x * 0.5,
            .y = self.WorkPos.y + self.WorkSize.y * 0.5,
        };
    }
};

pub const ImGuiPlatformIO = extern struct {
    Platform_CreateWindow: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Platform_DestroyWindow: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Platform_ShowWindow: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Platform_SetWindowPos: ?*const fn ([*c]ImGuiViewport, ImVec2) callconv(.C) void,
    Platform_GetWindowPos: ?*const fn ([*c]ImGuiViewport) callconv(.C) ImVec2,
    Platform_SetWindowSize: ?*const fn ([*c]ImGuiViewport, ImVec2) callconv(.C) void,
    Platform_GetWindowSize: ?*const fn ([*c]ImGuiViewport) callconv(.C) ImVec2,
    Platform_SetWindowFocus: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Platform_GetWindowFocus: ?*const fn ([*c]ImGuiViewport) callconv(.C) bool,
    Platform_GetWindowMinimized: ?*const fn ([*c]ImGuiViewport) callconv(.C) bool,
    Platform_SetWindowTitle: ?*const fn ([*c]ImGuiViewport, [*c]const u8) callconv(.C) void,
    Platform_SetWindowAlpha: ?*const fn ([*c]ImGuiViewport, f32) callconv(.C) void,
    Platform_UpdateWindow: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Platform_RenderWindow: ?*const fn ([*c]ImGuiViewport, ?*anyopaque) callconv(.C) void,
    Platform_SwapBuffers: ?*const fn ([*c]ImGuiViewport, ?*anyopaque) callconv(.C) void,
    Platform_GetWindowDpiScale: ?*const fn ([*c]ImGuiViewport) callconv(.C) f32,
    Platform_OnChangedViewport: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Platform_CreateVkSurface: ?*const fn ([*c]ImGuiViewport, ImU64, ?*const anyopaque, [*c]ImU64) callconv(.C) c_int,
    Renderer_CreateWindow: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Renderer_DestroyWindow: ?*const fn ([*c]ImGuiViewport) callconv(.C) void,
    Renderer_SetWindowSize: ?*const fn ([*c]ImGuiViewport, ImVec2) callconv(.C) void,
    Renderer_RenderWindow: ?*const fn ([*c]ImGuiViewport, ?*anyopaque) callconv(.C) void,
    Renderer_SwapBuffers: ?*const fn ([*c]ImGuiViewport, ?*anyopaque) callconv(.C) void,
    Monitors: ImVector(ImGuiPlatformMonitor),
    Viewports: ImVector([*c]ImGuiViewport),

    extern fn _1_ImGuiPlatformIO_init_() ImGuiPlatformIO;
    pub const init = _1_ImGuiPlatformIO_init_;
};

pub const ImGuiPlatformMonitor = extern struct {
    MainPos: ImVec2,
    MainSize: ImVec2,
    WorkPos: ImVec2,
    WorkSize: ImVec2,
    DpiScale: f32,

    extern fn _1_ImGuiPlatformMonitor_init_() ImGuiPlatformMonitor;
    pub const init = _1_ImGuiPlatformMonitor_init_;
};

pub const ImGuiPlatformImeData = extern struct {
    WantVisible: bool,
    InputPos: ImVec2,
    InputLineHeight: f32,

    extern fn _1_ImGuiPlatformImeData_init_() ImGuiPlatformImeData;
    pub const init = _1_ImGuiPlatformImeData_init_;
};

pub inline fn GetKeyIndex(key: ImGuiKey) ImGuiKey {
    ImAssert(@intCast(c_int, key) >= @intCast(c_int, ImGuiKey._NamedKey_BEGIN.bits) and @intCast(c_int, key) < @intCast(c_int, ImGuiKey._NamedKey_END.bits) and @as(bool, @as([*c]const u8, "\"ImGuiKey and native_index was merged together and native_index is disabled by IMGUI_DISABLE_OBSOLETE_KEYIO. Please switch to ImGuiKey.\"")));
    return key;
}

// opaques

const ImDrawListSharedData = anyopaque;
const ImGuiContext = anyopaque;
const ImFontBuilderIO = anyopaque;
