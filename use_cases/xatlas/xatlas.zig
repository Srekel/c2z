// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

pub const xatlas = struct {
    pub const ChartType = extern struct {
        bits: c_int = 0,

        pub const Planar: ChartType = .{ .bits = 0 };
        pub const Ortho: ChartType = .{ .bits = 1 };
        pub const LSCM: ChartType = .{ .bits = 2 };
        pub const Piecewise: ChartType = .{ .bits = 3 };
        pub const Invalid: ChartType = .{ .bits = 4 };

        // pub usingnamespace cpp.FlagsMixin(ChartType);
    };

    pub const Chart = extern struct {
        faceArray: [*c]u32,
        atlasIndex: u32,
        faceCount: u32,
        type: ChartType,
        material: u32,
    };

    pub const Vertex = extern struct {
        atlasIndex: i32,
        chartIndex: i32,
        uv: [2]f32,
        xref: u32,
    };

    pub const Mesh = extern struct {
        chartArray: [*c]Chart,
        indexArray: [*c]u32,
        vertexArray: [*c]Vertex,
        chartCount: u32,
        indexCount: u32,
        vertexCount: u32,
    };

    extern fn _1_xatlas_kImageChartIndexMask_() *const u32;
    pub const kImageChartIndexMask = _1_xatlas_kImageChartIndexMask_;

    extern fn _1_xatlas_kImageHasChartIndexBit_() *const u32;
    pub const kImageHasChartIndexBit = _1_xatlas_kImageHasChartIndexBit_;

    extern fn _1_xatlas_kImageIsBilinearBit_() *const u32;
    pub const kImageIsBilinearBit = _1_xatlas_kImageIsBilinearBit_;

    extern fn _1_xatlas_kImageIsPaddingBit_() *const u32;
    pub const kImageIsPaddingBit = _1_xatlas_kImageIsPaddingBit_;

    pub const Atlas = extern struct {
        image: [*c]u32,
        meshes: [*c]Mesh,
        utilization: [*c]f32,
        width: u32,
        height: u32,
        atlasCount: u32,
        chartCount: u32,
        meshCount: u32,
        texelsPerUnit: f32,
    };

    extern fn _1_xatlas_Create_() [*c]Atlas;
    pub const Create = _1_xatlas_Create_;

    extern fn _1_xatlas_Destroy_(atlas: [*c]Atlas) void;
    pub const Destroy = _1_xatlas_Destroy_;

    pub const IndexFormat = extern struct {
        bits: c_int = 0,

        pub const UInt16: IndexFormat = .{ .bits = 0 };
        pub const UInt32: IndexFormat = .{ .bits = 1 };

        // pub usingnamespace cpp.FlagsMixin(IndexFormat);
    };

    pub const MeshDecl = extern struct {
        vertexPositionData: ?*const anyopaque = null,
        vertexNormalData: ?*const anyopaque = null,
        vertexUvData: ?*const anyopaque = null,
        indexData: ?*const anyopaque = null,
        faceIgnoreData: [*c]const bool = null,
        faceMaterialData: [*c]const u32 = null,
        faceVertexCount: [*c]const u8 = null,
        vertexCount: u32 = @intCast(u32, 0),
        vertexPositionStride: u32 = @intCast(u32, 0),
        vertexNormalStride: u32 = @intCast(u32, 0),
        vertexUvStride: u32 = @intCast(u32, 0),
        indexCount: u32 = @intCast(u32, 0),
        indexOffset: i32 = 0,
        faceCount: u32 = @intCast(u32, 0),
        indexFormat: IndexFormat = IndexFormat.UInt16.bits,
        epsilon: f32 = 1.1920929E-7,
    };

    pub const AddMeshError = extern struct {
        bits: c_int = 0,

        pub const Success: AddMeshError = .{ .bits = 0 };
        pub const Error: AddMeshError = .{ .bits = 1 };
        pub const IndexOutOfRange: AddMeshError = .{ .bits = 2 };
        pub const InvalidFaceVertexCount: AddMeshError = .{ .bits = 3 };
        pub const InvalidIndexCount: AddMeshError = .{ .bits = 4 };

        // pub usingnamespace cpp.FlagsMixin(AddMeshError);
    };

    extern fn _1_xatlas_AddMesh_(atlas: [*c]Atlas, meshDecl: *const MeshDecl, meshCountHint: u32) AddMeshError;
    pub fn AddMesh(
        atlas: [*c]Atlas,
        meshDecl: *const MeshDecl,
        __opt: struct {
            meshCountHint: u32 = @intCast(u32, 0),
        },
    ) AddMeshError {
        return _1_xatlas_AddMesh_(atlas, meshDecl, __opt.meshCountHint);
    }

    extern fn _1_xatlas_AddMeshJoin_(atlas: [*c]Atlas) void;
    pub const AddMeshJoin = _1_xatlas_AddMeshJoin_;

    pub const UvMeshDecl = extern struct {
        vertexUvData: ?*const anyopaque = null,
        indexData: ?*const anyopaque = null,
        faceMaterialData: [*c]const u32 = null,
        vertexCount: u32 = @intCast(u32, 0),
        vertexStride: u32 = @intCast(u32, 0),
        indexCount: u32 = @intCast(u32, 0),
        indexOffset: i32 = 0,
        indexFormat: IndexFormat = IndexFormat.UInt16.bits,
    };

    extern fn _1_xatlas_AddUvMesh_(atlas: [*c]Atlas, decl: *const UvMeshDecl) AddMeshError;
    pub const AddUvMesh = _1_xatlas_AddUvMesh_;

    pub const ParameterizeFunc = ?*const fn ([*c]const f32, [*c]f32, u32, [*c]const u32, u32) callconv(.C) void;

    pub const ChartOptions = extern struct {
        paramFunc: ParameterizeFunc = null,
        maxChartArea: f32 = 0,
        maxBoundaryLength: f32 = 0,
        normalDeviationWeight: f32 = 2,
        roundnessWeight: f32 = 0.00999999977,
        straightnessWeight: f32 = 6,
        normalSeamWeight: f32 = 4,
        textureSeamWeight: f32 = 0.5,
        maxCost: f32 = 2,
        maxIterations: u32 = @intCast(u32, 1),
        useInputMeshUvs: bool = false,
        fixWinding: bool = false,
    };

    extern fn _1_xatlas_ComputeCharts_(atlas: [*c]Atlas, options: ChartOptions) void;
    pub fn ComputeCharts(
        atlas: [*c]Atlas,
        __opt: struct {
            options: ChartOptions = .{},
        },
    ) void {
        return _1_xatlas_ComputeCharts_(atlas, __opt.options);
    }

    pub const PackOptions = extern struct {
        maxChartSize: u32 = @intCast(u32, 0),
        padding: u32 = @intCast(u32, 0),
        texelsPerUnit: f32 = 0,
        resolution: u32 = @intCast(u32, 0),
        bilinear: bool = true,
        blockAlign: bool = false,
        bruteForce: bool = false,
        createImage: bool = false,
        rotateChartsToAxis: bool = true,
        rotateCharts: bool = true,
    };

    extern fn _1_xatlas_PackCharts_(atlas: [*c]Atlas, packOptions: PackOptions) void;
    pub fn PackCharts(
        atlas: [*c]Atlas,
        __opt: struct {
            packOptions: PackOptions = .{},
        },
    ) void {
        return _1_xatlas_PackCharts_(atlas, __opt.packOptions);
    }

    extern fn _1_xatlas_Generate_(atlas: [*c]Atlas, chartOptions: ChartOptions, packOptions: PackOptions) void;
    pub fn Generate(
        atlas: [*c]Atlas,
        __opt: struct {
            chartOptions: ChartOptions = .{},
            packOptions: PackOptions = .{},
        },
    ) void {
        return _1_xatlas_Generate_(atlas, __opt.chartOptions, __opt.packOptions);
    }

    pub const ProgressCategory = extern struct {
        bits: c_int = 0,

        pub const AddMesh: ProgressCategory = .{ .bits = 0 };
        pub const ComputeCharts: ProgressCategory = .{ .bits = 1 };
        pub const PackCharts: ProgressCategory = .{ .bits = 2 };
        pub const BuildOutputMeshes: ProgressCategory = .{ .bits = 3 };

        // pub usingnamespace cpp.FlagsMixin(ProgressCategory);
    };

    pub const ProgressFunc = ?*const fn (ProgressCategory, c_int, ?*anyopaque) callconv(.C) bool;

    extern fn _1_xatlas_SetProgressCallback_(atlas: [*c]Atlas, progressFunc: ProgressFunc, progressUserData: ?*anyopaque) void;
    pub fn SetProgressCallback(
        atlas: [*c]Atlas,
        __opt: struct {
            progressFunc: ProgressFunc = null,
            progressUserData: ?*anyopaque = null,
        },
    ) void {
        return _1_xatlas_SetProgressCallback_(atlas, __opt.progressFunc, __opt.progressUserData);
    }

    pub const ReallocFunc = ?*const fn (?*anyopaque, usize) callconv(.C) ?*anyopaque;

    pub const FreeFunc = ?*const fn (?*anyopaque) callconv(.C) void;

    extern fn _1_xatlas_SetAlloc_(reallocFunc: ReallocFunc, freeFunc: FreeFunc) void;
    pub fn SetAlloc(
        reallocFunc: ReallocFunc,
        __opt: struct {
            freeFunc: FreeFunc = null,
        },
    ) void {
        return _1_xatlas_SetAlloc_(reallocFunc, __opt.freeFunc);
    }

    pub const PrintFunc = ?*const fn ([*c]const u8, ...) callconv(.C) c_int;

    extern fn _1_xatlas_SetPrint_(print: PrintFunc, verbose: bool) void;
    pub const SetPrint = _1_xatlas_SetPrint_;

    extern fn _1_xatlas_StringForEnum_(err: AddMeshError) [*c]const u8;
    pub const StringForEnum = _1_xatlas_StringForEnum_;

    extern fn _2_xatlas_StringForEnum_(category: ProgressCategory) [*c]const u8;
    pub const StringForEnum__Overload2 = _2_xatlas_StringForEnum_;
};
