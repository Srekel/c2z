// auto generated by c2z
#include "c021_operator_overload.h"

extern "C" void _1_ImVec2_init_(::ImVec2 *self) { *self = ::ImVec2(); }
extern "C" void _2_ImVec2_init_(::ImVec2 *self, float x, float y) { *self = ::ImVec2(x, y); }
extern "C" float & _1_ImVec2_getPtr_(::ImVec2* self, int idx) { return (*self)[idx]; }
extern "C" float _1_ImVec2_get_(const ::ImVec2 *self, int idx) { return (*self)[idx]; }
extern "C" ImVec2 _1_ImVec2_mul_(const ::ImVec2 *self, const float rhs) { return *self * rhs; }
extern "C" ImVec2 & _1_ImVec2_mulInto_(::ImVec2* self, const float rhs) { return *self *= rhs; }
extern "C" ImVec2 _1_ImVec2_div_(const ::ImVec2 *self, const float rhs) { return *self / rhs; }
extern "C" ImVec2 & _1_ImVec2_divInto_(::ImVec2* self, const float rhs) { return *self /= rhs; }
extern "C" ImVec2 _1_ImVec2_add_(const ::ImVec2 *self, const ImVec2 & rhs) { return *self + rhs; }
extern "C" ImVec2 & _1_ImVec2_addInto_(::ImVec2* self, const ImVec2 & rhs) { return *self += rhs; }
extern "C" ImVec2 _1_ImVec2_sub_(const ::ImVec2 *self, const ImVec2 & rhs) { return *self - rhs; }
extern "C" ImVec2 & _1_ImVec2_subInto_(::ImVec2* self, const ImVec2 & rhs) { return *self -= rhs; }
extern "C" ImVec4 _1_add_(const ImVec4 & lhs, const ImVec4 & rhs) { return lhs + rhs; }
extern "C" ImVec4 _1_sub_(const ImVec4 & lhs, const ImVec4 & rhs) { return lhs - rhs; }
extern "C" ImVec4 _1_mul_(const ImVec4 & lhs, const ImVec4 & rhs) { return lhs * rhs; }
